{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alex/Programming/web_development/map_dev_server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _jsxFileName = \"/Users/alex/Programming/web_development/map_dev_server/client/src/App.js\";\nimport './App.css';\nimport React, { createRef } from 'react';\nvar CHUNKSIZE = 16;\nvar blocksold = [{\n  blockid: 0,\n  blockname: '1',\n  imagesrc: '#ffffff'\n}, {\n  blockid: 1,\n  blockname: '2',\n  imagesrc: '#d1e7dc'\n}, {\n  blockid: 2,\n  blockname: '3',\n  imagesrc: '#c4d4e1'\n}, {\n  blockid: 3,\n  blockname: '4',\n  imagesrc: '#bcb5d3'\n}, {\n  blockid: 4,\n  blockname: '5',\n  imagesrc: '#f5dbe2'\n}, {\n  blockid: 5,\n  blockname: '6',\n  imagesrc: '#eeb6c9'\n}, {\n  blockid: 6,\n  blockname: '7',\n  imagesrc: '#c49abf'\n}, {\n  blockid: 7,\n  blockname: '8',\n  imagesrc: '#bada55'\n}, {\n  blockid: 8,\n  blockname: '9',\n  imagesrc: '#ffd700'\n}, {\n  blockid: 9,\n  blockname: '10',\n  imagesrc: '#f47b79'\n}];\nvar blocks = [{\n  blockid: '0',\n  blockname: '1',\n  imagesrc: '#ffffff'\n}, {\n  blockid: '1',\n  blockname: '2',\n  imagesrc: '#d1e7dc'\n}, {\n  blockid: '2',\n  blockname: '3',\n  imagesrc: '#c4d4e1'\n}, {\n  blockid: '3',\n  blockname: '4',\n  imagesrc: '#bcb5d3'\n}, {\n  blockid: '4',\n  blockname: '5',\n  imagesrc: '#f5dbe2'\n}, {\n  blockid: '5',\n  blockname: '6',\n  imagesrc: '#eeb6c9'\n}, {\n  blockid: '6',\n  blockname: '7',\n  imagesrc: '#c49abf'\n}, {\n  blockid: '7',\n  blockname: '8',\n  imagesrc: '#bada55'\n}, {\n  blockid: '8',\n  blockname: '9',\n  imagesrc: '#ffd700'\n}, {\n  blockid: '9',\n  blockname: '10',\n  imagesrc: '#f47b79'\n}, {\n  blockid: 'a',\n  blockname: '11',\n  imagesrc: '#c6e2d4'\n}, {\n  blockid: 'b',\n  blockname: '12',\n  imagesrc: '#b6d3c2'\n}, {\n  blockid: 'c',\n  blockname: '13',\n  imagesrc: '#e0b1cb'\n}, {\n  blockid: 'd',\n  blockname: '14',\n  imagesrc: '#d0a7b7'\n}, {\n  blockid: 'e',\n  blockname: '15',\n  imagesrc: '#f3d1d3'\n}, {\n  blockid: 'f',\n  blockname: '16',\n  imagesrc: '#e9b8c8'\n}];\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  var yi = 1;\n  if (dy < 0) {\n    yi = -1;\n    dy = -dy;\n  }\n  var D = 2 * dy - dx;\n  var y = y0;\n  for (var x = x0; x < x1 + 1; x++) {\n    drawFunc(x, y);\n    if (D > 0) {\n      y = y + yi;\n      D = D + 2 * (dy - dx);\n    } else {\n      D = D + 2 * dy;\n    }\n  }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  var xi = 1;\n  if (dx < 0) {\n    xi = -1;\n    dx = -dx;\n  }\n  var D = 2 * dx - dy;\n  var x = x0;\n  for (var y = y0; y < y1 + 1; y++) {\n    drawFunc(x, y);\n    if (D > 0) {\n      x = x + xi;\n      D = D + 2 * (dx - dy);\n    } else {\n      D = D + 2 * dx;\n    }\n  }\n}\nfunction plotLine(p1, p2, offset, drawFunc) {\n  var x0 = p1.x + offset.x;\n  var y0 = p1.y + offset.y;\n  var x1 = p2.x + offset.x;\n  var y1 = p2.y + offset.y;\n  if (x0 === x1 && y0 === y1) drawFunc(x0, y0);\n  if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n    if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);else plotLineLow(x0, y0, x1, y1, drawFunc);\n  } else {\n    if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);else plotLineHigh(x0, y0, x1, y1, drawFunc);\n  }\n}\nvar Vector2D = /*#__PURE__*/function () {\n  function Vector2D(x, y) {\n    _classCallCheck(this, Vector2D);\n    this.x = x;\n    this.y = y;\n  }\n  _createClass(Vector2D, [{\n    key: \"transform\",\n    value: function transform(x, y) {\n      this.x += x;\n      this.y += y;\n    }\n  }, {\n    key: \"setTo\",\n    value: function setTo(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: \"isEqualTo\",\n    value: function isEqualTo(othervector) {\n      return this.x === othervector.x && this.y === othervector.y;\n    }\n  }, {\n    key: \"notEqualTo\",\n    value: function notEqualTo(othervector) {\n      return this.x !== othervector.x || this.y !== othervector.y;\n    }\n  }, {\n    key: \"positive\",\n    value: function positive() {\n      return this.x >= 0 && this.y >= 0;\n    }\n  }, {\n    key: \"multipliedby\",\n    value: function multipliedby(number) {\n      return new Vector2D(this.x * number, this.y * number);\n    }\n  }, {\n    key: \"transformedby\",\n    value: function transformedby(x, y) {\n      return new Vector2D(this.x + x, this.y + y);\n    }\n  }]);\n  return Vector2D;\n}();\nvar Map = /*#__PURE__*/function () {\n  function Map(w, h) {\n    _classCallCheck(this, Map);\n    this.canvasdimensions = new Vector2D(w, h); // establishing at start means no resizing canvas element\n    this.data = null;\n    this.numchunks = null;\n  }\n  _createClass(Map, [{\n    key: \"getValues\",\n    value: function getValues(offset, scale) {\n      var chunkpixels = CHUNKSIZE * scale;\n      var numchunks = new Vector2D(0, 0);\n      var startpoint = new Vector2D(0, 0);\n      startpoint.x = offset.x === 0 ? 0 : Math.floor(-1 * offset.x / chunkpixels);\n      startpoint.y = offset.y === 0 ? 0 : Math.floor(-1 * offset.y / chunkpixels);\n      numchunks.x = Math.ceil(this.canvasdimensions.x / chunkpixels) + 1; // bit cheaty - should probs optimise\n      numchunks.y = Math.ceil(this.canvasdimensions.y / chunkpixels) + 1;\n      return {\n        startpoint: startpoint,\n        numchunks: numchunks\n      };\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(dimn, start, lines) {\n      var coords = [];\n      var grid = Array(dimn.x);\n      for (var i = 0; i < dimn.x; i++) {\n        grid[i] = Array(dimn.y);\n        for (var j = 0; j < dimn.y; j++) {\n          var coordsobj = {\n            x: start.x + i,\n            y: start.y + j\n          };\n          coords.push(coordsobj);\n        }\n      }\n      var map_grid = this;\n      // console.log(coords);\n      return new Promise(function (resolve, reject) {\n        fetch('/getchunks', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/octet-stream',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            coords: coords,\n            lines: lines\n          })\n        }).then(function (data) {\n          return data.arrayBuffer();\n        }).then(function (chunkbuffer) {\n          console.log(_toConsumableArray(new Uint8Array(chunkbuffer)).map(function (x) {\n            return x.toString(16).padStart(2, '0');\n          }));\n          map_grid.data = chunkbuffer;\n          map_grid.numchunks = dimn;\n          // console.log(new Uint32Array(chunkbuffer));\n\n          // let bufferread = new Uint32Array(chunkbuffer);\n\n          // // console.log(bufferread);\n\n          // // let chunkbufferlength = dimn.x*dimn.y;\n\n          // let bufferoffset = 0;\n\n          // for (let i=0;i<dimn.x;i++) {\n          //     for (let j=0;j<dimn.y;j++) {\n\n          //         grid[i][j] = new Chunk(i+start.x, j+start.y, bufferread.slice(bufferoffset,bufferoffset+(CHUNKSIZE*CHUNKSIZE)-1)); // trying to get buffer from chunkdata - buffer not implemented yet\n          //         bufferoffset+=(CHUNKSIZE*CHUNKSIZE);\n          //     }\n          // }\n          // map_grid.matrix = grid;\n          // console.log(map_grid.matrix);\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"getChunkPosOffset\",\n    value: function getChunkPosOffset(currentcell, startpoint) {\n      var cell_i = Math.floor(currentcell.x / CHUNKSIZE) - startpoint.x;\n      var cell_k = currentcell.x - (cell_i + startpoint.x) * CHUNKSIZE;\n      var cell_j = Math.floor(currentcell.y / CHUNKSIZE) - startpoint.y;\n      var cell_l = currentcell.y - (cell_j + startpoint.y) * CHUNKSIZE;\n      return {\n        cell_i: cell_i,\n        cell_j: cell_j,\n        cell_k: cell_k,\n        cell_l: cell_l\n      };\n    }\n  }, {\n    key: \"addCell\",\n    value: function addCell(index, colorhex) {\n      var data = new Uint32Array(this.data);\n      data[index] = colorhex;\n      // console.log(data[index], colorhex);\n    }\n  }]);\n  return Map;\n}();\nvar Chunk = /*#__PURE__*/function () {\n  function Chunk(x, y) {\n    var chunkcells = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, Chunk);\n    this.x = x;\n    this.y = y;\n    this.data = new ArrayBuffer(4 * (CHUNKSIZE * CHUNKSIZE));\n    if (chunkcells.length) {\n      var data = new Uint32Array(this.data);\n      for (var i = 0; i < chunkcells.length; i++) {\n        data[i] = chunkcells[i];\n      }\n    }\n  }\n  // id needs to be 32 bit (4 byte) uint\n  _createClass(Chunk, [{\n    key: \"addCell\",\n    value: function addCell(x, y, id) {\n      var data = new Uint32Array(this.data);\n      data[x * CHUNKSIZE + y] = id;\n    }\n  }]);\n  return Chunk;\n}();\nvar AppWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(AppWrapper, _React$Component);\n  function AppWrapper(props) {\n    var _this;\n    _classCallCheck(this, AppWrapper);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppWrapper).call(this, props));\n    _this.state = {\n      debug_mode: false,\n      show_stats: true,\n      color_selected: 255 * 255,\n      update: {\n        time: 0,\n        tot_time: 0,\n        num_updates: 1\n      },\n      draw: {\n        time: 0,\n        tot_time: 0,\n        num_updates: 1\n      },\n      cursorx: 0,\n      cursory: 0,\n      offsetx: 0,\n      offsety: 0,\n      chunkx: 0,\n      chunky: 0\n    };\n    _this.changeColor = function (blockid) {\n      if (typeof blockid === 'string') {\n        var out_num = parseInt(blockid.substring(1), 16);\n        console.log(blockid.substring(1));\n        console.log(out_num);\n        _this.setState({\n          color_selected: out_num\n        });\n      } else if (typeof blockid === 'number') {\n        _this.setState({\n          color_selected: blockid\n        });\n      }\n    };\n    _this.getColorSelected = function () {\n      //eg. ff00ff\n      // return parseInt(this.state.block_selected, 16);\n      return _this.state.color_selected;\n    };\n    _this.getDebugMode = function () {\n      return _this.state.debug_mode;\n    };\n    _this.isSelected = function (blockid) {\n      if (typeof blockid === 'string') {\n        var out_num = parseInt(blockid.substring(1), 16);\n        return out_num === _this.state.color_selected;\n      } else if (typeof blockid === 'number') {\n        return blockid === _this.state.color_selected;\n      }\n    };\n    _this.changeUpdateTime = function (new_time) {\n      _this.setState({\n        update: {\n          time: new_time,\n          tot_time: _this.state.update.tot_time + new_time,\n          num_updates: _this.state.update.num_updates + 1\n        }\n      });\n    };\n    _this.changeDrawTime = function (new_time) {\n      _this.setState({\n        draw: {\n          time: new_time,\n          tot_time: _this.state.draw.tot_time + new_time,\n          num_updates: _this.state.draw.num_updates + 1\n        }\n      });\n    };\n    _this.changeCursorLoc = function (vector) {\n      _this.setState({\n        cursorx: vector.x,\n        cursory: vector.y\n      });\n    };\n    _this.changeOffsetLoc = function (vector) {\n      _this.setState({\n        offsetx: vector.x,\n        offsety: vector.y\n      });\n    };\n    _this.changeChunkLoc = function (x, y) {\n      _this.setState({\n        chunkx: x,\n        chunky: y\n      });\n    };\n    return _this;\n  }\n  _createClass(AppWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n      // this.getData();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var buffer = new ArrayBuffer(4 * 256);\n      var int32View = new Int32Array(buffer);\n      for (var i = 0; i < int32View.length; i++) {\n        int32View[i] = i * 2;\n      }\n      ;\n      fetch('/test', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/octet-stream',\n          'Content-Type': 'application/octet-stream'\n        },\n        body: buffer\n      }).then(function (res) {\n        return res.json();\n      }).then(function (message) {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MapCanvas, {\n        getDebugMode: this.getDebugMode,\n        changeUpdateTime: this.changeUpdateTime,\n        changeDrawTime: this.changeDrawTime,\n        getColorSelected: this.getColorSelected,\n        changeCursorLoc: this.changeCursorLoc,\n        changeOffsetLoc: this.changeOffsetLoc,\n        changeChunkLoc: this.changeChunkLoc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Palette, {\n        isSelected: this.isSelected,\n        changeColor: this.changeColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drawer primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 17\n        }\n      }, this.state.show_stats ? /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          right: \"0.8vw\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 43\n        }\n      }, \"(\", this.state.update.time, \"ms, avg: \", Math.round(this.state.update.tot_time / this.state.update.num_updates), \"ms, \", this.state.update.num_updates, \" updates)\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }\n      }), \"(\", this.state.draw.time, \"ms, avg: \", Math.round(this.state.draw.tot_time / this.state.draw.num_updates), \"ms, \", this.state.draw.num_updates, \" draws)\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 21\n        }\n      }), \"Cursor: (\", this.state.cursorx, \",\", this.state.cursory, \")\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 21\n        }\n      }), \"Offset: (\", this.state.offsetx, \",\", this.state.offsety, \")\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }\n      }), \"Chunk: (\", this.state.chunkx, \",\", this.state.chunky, \")\") : null, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 17\n        }\n      }, \"Instructions:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 37\n        }\n      }), \"This is a pixel art canvas with infinite area. Scroll to zoom in and out, right click to pan around, and use left click to draw on the canvas.\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 17\n        }\n      }), \"Use the palette on the right to select your colour.\", /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"#909090\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 17\n        }\n      }, \"(!!!!) Be aware that there is no saving yet lol, also this is just a prototype so limited colours, no drawing tools etc.\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: function onChange() {\n          _this2.setState({\n            debug_mode: !_this2.state.debug_mode\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 17\n        }\n      }), \" Debug Mode\\u2002\", /*#__PURE__*/React.createElement(\"input\", {\n        checked: this.state.show_stats,\n        type: \"checkbox\",\n        onChange: function onChange() {\n          _this2.setState({\n            show_stats: !_this2.state.show_stats\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 17\n        }\n      }), \" Stats\"));\n    }\n  }]);\n  return AppWrapper;\n}(React.Component);\nvar MapCanvas = /*#__PURE__*/function (_React$Component2) {\n  _inherits(MapCanvas, _React$Component2);\n  function MapCanvas(props) {\n    var _this3;\n    _classCallCheck(this, MapCanvas);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MapCanvas).call(this, props));\n    _this3.getDebugMode = props.getDebugMode;\n    _this3.getColorSelected = props.getColorSelected;\n    _this3.changeUpdateTime = props.changeUpdateTime;\n    _this3.changeDrawTime = props.changeDrawTime;\n    _this3.changeCursorLoc = props.changeCursorLoc;\n    _this3.changeOffsetLoc = props.changeOffsetLoc;\n    _this3.changeChunkLoc = props.changeChunkLoc;\n    _this3.drawLines = [];\n    _this3.scale = 16;\n    _this3.tempscale = _this3.scale;\n    _this3.map_grid = null;\n    _this3.canvasRef = createRef();\n    _this3.mapoffset = new Vector2D(0, 0);\n    _this3.celloffset = new Vector2D(0, 0);\n    _this3.currentcell = new Vector2D(0, 0);\n    _this3.startpoint = new Vector2D(0, 0);\n    _this3.cursorcurrent = new Vector2D(0, 0);\n    _this3.lmousedown = false;\n    _this3.rmousedown = false;\n    _this3.canvas = null;\n    return _this3;\n  }\n\n  //Called after element's initialisation\n  _createClass(MapCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.canvas = this.canvasRef.current;\n\n      // this.resizeCanvas(this.canvas);\n      var _this$canvas$getBound = this.canvas.getBoundingClientRect(),\n        width = _this$canvas$getBound.width,\n        height = _this$canvas$getBound.height;\n      this.map_grid = new Map(width, height);\n      setTimeout(this.updateCanvas(), 1000);\n    }\n  }, {\n    key: \"getCursorPosition\",\n    value: function getCursorPosition(event, canvas) {\n      var rect = canvas.getBoundingClientRect();\n      var x = event.clientX - rect.left;\n      var y = event.clientY - rect.top;\n      var pos = new Vector2D(x, y);\n      // console.log(`cursor at (${x.toFixed(1)},${y.toFixed(1)})`);\n      return pos;\n    }\n  }, {\n    key: \"getCurrentCell\",\n    value: function getCurrentCell() {\n      var x = Math.floor((this.cursorcurrent.x - this.mapoffset.x * this.scale) / this.scale);\n      var y = Math.floor((this.cursorcurrent.y - this.mapoffset.y * this.scale) / this.scale);\n      var pos = new Vector2D(x, y);\n      return pos;\n    }\n  }, {\n    key: \"moveMap\",\n    value: function moveMap(start, end) {\n      var x = (end.x - start.x) / this.scale;\n      var y = (end.y - start.y) / this.scale;\n      this.mapoffset.transform(x, y);\n      this.celloffset.setTo(Math.floor(this.mapoffset.x), Math.floor(this.mapoffset.y));\n      this.changeOffsetLoc(this.celloffset);\n    }\n  }, {\n    key: \"drawMap\",\n    value: function drawMap(canvas, startpoint) {\n      var _this4 = this;\n      var start = Date.now();\n      this.resizeCanvas(canvas);\n      var ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // finding location in terms of iterators of current cell\n      var _this$map_grid$getChu = this.map_grid.getChunkPosOffset(this.currentcell, startpoint),\n        cell_i = _this$map_grid$getChu.cell_i,\n        cell_j = _this$map_grid$getChu.cell_j,\n        cell_k = _this$map_grid$getChu.cell_k,\n        cell_l = _this$map_grid$getChu.cell_l;\n      var blockid;\n      var x;\n      var y;\n      var mapoffset_x = Math.round(this.mapoffset.x);\n      var mapoffset_y = Math.round(this.mapoffset.y);\n      var doFill = function doFill(i, j, k, l) {\n        x = ((i + startpoint.x) * CHUNKSIZE + k + mapoffset_x) * _this4.scale;\n        y = ((j + startpoint.y) * CHUNKSIZE + l + mapoffset_y) * _this4.scale;\n        if (x % 1 != 0 || y % 1 != 0 || _this4.scale % 1 != 0) console.log(\"ALERT:\", x, y, _this4.scale);\n        ctx.fillRect(x, y, _this4.scale, _this4.scale);\n        // console.log(x,y,cellapparentsize);\n      };\n\n      if (this.map_grid.data === null) return;\n      // for map\n\n      var chunkbufferoffset = 0;\n      var data = new Uint32Array(this.map_grid.data);\n      if (this.getDebugMode()) ctx.beginPath();\n      for (var i = 0; i < this.map_grid.numchunks.x; i++) {\n        for (var j = 0; j < this.map_grid.numchunks.y; j++) {\n          // for each chunk\n          if (this.getDebugMode()) {\n            x = ((i + startpoint.x) * CHUNKSIZE + this.mapoffset.x) * this.scale;\n            y = ((j + startpoint.y) * CHUNKSIZE + this.mapoffset.y) * this.scale;\n            ctx.fillStyle = \"#000000\";\n            ctx.lineWidth = 0.01 * Math.floor(this.scale);\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, this.canvas.height / 2);\n            // ctx.stroke();\n            ctx.moveTo(0, y);\n            ctx.lineTo(this.canvas.width / 2, y);\n          }\n          for (var c = 0; c < CHUNKSIZE * CHUNKSIZE; c++) {\n            var k = Math.floor(c / CHUNKSIZE);\n            var l = c - k * CHUNKSIZE;\n\n            // if (typeof this.map_grid.matrix[i][j] === 'undefined') continue;\n\n            blockid = data[chunkbufferoffset + c];\n            // if (c%100===0) console.log(blockid);\n\n            if (blockid !== 16777215) {\n              // ctx.fillStyle = blockid.toString(16);\n              ctx.fillStyle = \"#\" + (blockid & 0x00FFFFFF).toString(16).padStart(6, '0');\n              // if (c===0) console.log((blockid & 0x00FFFFFF).toString(16).padStart(6, '0'))\n              doFill(i, j, k, l, blockid);\n            }\n          }\n          chunkbufferoffset += CHUNKSIZE * CHUNKSIZE;\n        }\n      }\n      if (this.getDebugMode()) ctx.stroke();\n      // ctx.fillStyle = \"#\" + this.getColorSelected() + \"8f\"; // placeholder until get images\n      // console.log(this.getColorSelected());\n      // console.log((this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0'));\n      ctx.fillStyle = \"#\" + (this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0') + \"ff\";\n      doFill(cell_i, cell_j, cell_k, cell_l);\n      this.changeDrawTime(Date.now() - start);\n    }\n  }, {\n    key: \"updateCanvas\",\n    value: function updateCanvas() {\n      var _this5 = this;\n      var start = Date.now(); // time testing\n      var _this$map_grid$getVal = this.map_grid.getValues(this.mapoffset.multipliedby(this.scale), this.scale),\n        startpoint = _this$map_grid$getVal.startpoint,\n        numchunks = _this$map_grid$getVal.numchunks;\n      var linestosend = this.drawLines;\n      this.drawLines = [];\n      this.map_grid.setMatrix(numchunks, startpoint, linestosend).then(function () {\n        _this5.drawMap(_this5.canvas, startpoint);\n        _this5.startpoint = startpoint;\n        _this5.changeUpdateTime(Date.now() - start);\n      });\n      setTimeout(function () {\n        _this5.updateCanvas();\n      }, 1000);\n    } // stolen code lmao\n  }, {\n    key: \"resizeCanvas\",\n    value: function resizeCanvas(canvas) {\n      var _canvas$getBoundingCl = canvas.getBoundingClientRect(),\n        width = _canvas$getBoundingCl.width,\n        height = _canvas$getBoundingCl.height;\n      if (canvas.width !== width || canvas.height !== height) {\n        var _window = window,\n          _window$devicePixelRa = _window.devicePixelRatio,\n          ratio = _window$devicePixelRa === void 0 ? 1 : _window$devicePixelRa;\n        var context = canvas.getContext('2d');\n        canvas.width = Math.floor(width * ratio / this.scale) * this.scale;\n        canvas.height = Math.floor(height * ratio / this.scale) * this.scale;\n        ;\n        //   console.log(canvas.width, canvas.height);\n        context.scale(ratio, ratio);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"drawCellAtMouse\",\n    value: function drawCellAtMouse(x, y) {\n      var currentpos = new Vector2D(x - this.celloffset.x, y - this.celloffset.y);\n      var _this$map_grid$getChu2 = this.map_grid.getChunkPosOffset(currentpos, this.startpoint),\n        cell_i = _this$map_grid$getChu2.cell_i,\n        cell_j = _this$map_grid$getChu2.cell_j,\n        cell_k = _this$map_grid$getChu2.cell_k,\n        cell_l = _this$map_grid$getChu2.cell_l; // console.log(`Insertion coords: x:${cell_i} y:${cell_j}`);\n      var dataindex = cell_i * this.map_grid.numchunks.y * (CHUNKSIZE * CHUNKSIZE) + cell_j * (CHUNKSIZE * CHUNKSIZE) + cell_k * CHUNKSIZE + cell_l;\n      var dataview = new Uint32Array(this.map_grid.data);\n      if (dataindex < dataview.length) this.map_grid.addCell(dataindex, this.getColorSelected());\n\n      // console.log(`cell drawn at index ${dataindex}`);\n      // console.log(`New cell is ${dataview[dataindex]}`);\n    }\n  }, {\n    key: \"moveCursor\",\n    value: function moveCursor(event) {\n      var update = false;\n      var newcursorcurrent = this.getCursorPosition(event, this.canvas);\n      if (this.rmousedown) {\n        this.moveMap(this.cursorcurrent, newcursorcurrent);\n        update = true;\n      }\n      this.cursorcurrent = newcursorcurrent;\n      var newcurrentcell = this.getCurrentCell();\n      if (!this.currentcell.isEqualTo(newcurrentcell)) {\n        if (this.lmousedown) {\n          // plotLine(this.currentcell, newcurrentcell, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n          this.drawLine(this.currentcell, newcurrentcell);\n        }\n        this.currentcell = newcurrentcell;\n        update = true;\n        this.changeCursorLoc(this.currentcell);\n        var _this$map_grid$getChu3 = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint),\n          cell_i = _this$map_grid$getChu3.cell_i,\n          cell_j = _this$map_grid$getChu3.cell_j,\n          cell_k = _this$map_grid$getChu3.cell_k,\n          cell_l = _this$map_grid$getChu3.cell_l;\n        this.changeChunkLoc(cell_i + this.startpoint.x, cell_j + this.startpoint.y);\n      }\n      return update;\n    }\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(p1, p2) {\n      var _this6 = this;\n      plotLine(p1, p2, this.celloffset, function (x, y) {\n        return _this6.drawCellAtMouse(x, y);\n      });\n      this.drawLines.push({\n        p1: p1,\n        p2: p2,\n        offset: this.celloffset,\n        blockid: this.getColorSelected()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"canvas\", {\n        ref: this.canvasRef,\n        className: \"map-canvas primary\",\n        onContextMenu: function onContextMenu(e) {\n          e.preventDefault();\n        },\n        onMouseDown: function onMouseDown(e) {\n          e.preventDefault();\n          if (e.button === 0) {\n            _this7.lmousedown = true;\n            _this7.drawLine(_this7.currentcell, _this7.currentcell);\n            _this7.drawMap(_this7.canvas, _this7.startpoint);\n          } else if (e.button === 2) {\n            _this7.rmousedown = true;\n          }\n        },\n        onMouseUp: function onMouseUp(e) {\n          _this7.lmousedown = false;\n          _this7.rmousedown = false;\n          _this7.drawMap(_this7.canvas, _this7.startpoint);\n        },\n        onMouseMove: function onMouseMove(e) {\n          var update = false;\n          update = _this7.moveCursor(e);\n          if (update) _this7.drawMap(_this7.canvas, _this7.startpoint);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n          _this7.moveCursor(e);\n          _this7.lmousedown = false;\n          _this7.rmousedown = false;\n          _this7.drawMap(_this7.canvas, _this7.startpoint);\n        },\n        onWheel: function onWheel(e) {\n          e.preventDefault();\n          var newscale = _this7.tempscale - Math.round(e.deltaY) / 1000;\n          console.log(_this7.scale, _this7.tempscale);\n          if (newscale > 5) _this7.tempscale = newscale;else _this7.tempscale = 5;\n          _this7.scale = Math.round(_this7.tempscale);\n          _this7.drawMap(_this7.canvas, _this7.startpoint);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n  return MapCanvas;\n}(React.Component); // needs to be fixed up - maybe add useEffect()\nvar Palette = /*#__PURE__*/function (_React$Component3) {\n  _inherits(Palette, _React$Component3);\n  function Palette(props) {\n    var _this8;\n    _classCallCheck(this, Palette);\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Palette).call(this, props));\n    _this8.changeColor = props.changeColor;\n    _this8.handleChange = function (e) {\n      _this8.changeColor(e.target.value);\n    };\n    return _this8;\n  }\n  _createClass(Palette, [{\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"palette primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 13\n        }\n      }, blocks.map(function (button) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: button.blockid,\n          style: {\n            backgroundColor: \"\".concat(button.imagesrc)\n          },\n          className: \"blockbutton\" + (_this9.props.isSelected(button.imagesrc) ? \"selected\" : \"\"),\n          onClick: function onClick() {\n            _this9.changeColor(button.imagesrc);\n          }\n          //onClick={() => {console.log(button.blockid)}}\n          ,\n          __self: _this9,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 25\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"color\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n  return Palette;\n}(React.Component);\nfunction App() {\n  return /*#__PURE__*/React.createElement(AppWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 5\n    }\n  });\n}\nexport default App;","map":{"version":3,"names":["React","createRef","CHUNKSIZE","blocksold","blockid","blockname","imagesrc","blocks","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","plotLine","p1","p2","offset","Math","abs","Vector2D","_classCallCheck","_createClass","key","value","transform","setTo","isEqualTo","othervector","notEqualTo","positive","multipliedby","number","transformedby","Map","w","h","canvasdimensions","data","numchunks","getValues","scale","chunkpixels","startpoint","floor","ceil","setMatrix","dimn","start","lines","coords","grid","Array","i","j","coordsobj","push","map_grid","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","arrayBuffer","chunkbuffer","console","log","_toConsumableArray","Uint8Array","map","toString","padStart","getChunkPosOffset","currentcell","cell_i","cell_k","cell_j","cell_l","addCell","index","colorhex","Uint32Array","Chunk","chunkcells","arguments","length","undefined","ArrayBuffer","id","AppWrapper","_React$Component","_inherits","props","_this","_possibleConstructorReturn","_getPrototypeOf","call","state","debug_mode","show_stats","color_selected","update","time","tot_time","num_updates","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","changeColor","out_num","parseInt","substring","setState","getColorSelected","getDebugMode","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","componentDidMount","document","style","overflow","getData","buffer","int32View","Int32Array","res","json","message","render","_this2","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","MapCanvas","Palette","position","right","round","color","type","onChange","checked","Component","_React$Component2","_this3","drawLines","tempscale","canvasRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","canvas","current","_this$canvas$getBound","getBoundingClientRect","width","height","setTimeout","updateCanvas","getCursorPosition","event","rect","clientX","left","clientY","top","pos","getCurrentCell","moveMap","end","drawMap","_this4","Date","now","resizeCanvas","ctx","getContext","clearRect","fillStyle","fillRect","_this$map_grid$getChu","mapoffset_x","mapoffset_y","doFill","k","l","chunkbufferoffset","beginPath","lineWidth","moveTo","lineTo","c","stroke","_this5","_this$map_grid$getVal","linestosend","_canvas$getBoundingCl","_window","window","_window$devicePixelRa","devicePixelRatio","ratio","context","drawCellAtMouse","currentpos","_this$map_grid$getChu2","dataindex","dataview","moveCursor","newcursorcurrent","newcurrentcell","drawLine","_this$map_grid$getChu3","_this6","_this7","ref","onContextMenu","e","preventDefault","onMouseDown","button","onMouseUp","onMouseMove","onMouseLeave","onWheel","newscale","deltaY","_React$Component3","_this8","handleChange","target","_this9","backgroundColor","concat","onClick","App"],"sources":["/Users/alex/Programming/web_development/map_dev_server/client/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst CHUNKSIZE = 16;\n\nconst blocksold = [\n    {\n        blockid: 0,\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: 1,\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: 2,\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: 3,\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: 4,\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: 5,\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: 6,\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: 7,\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: 8,\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: 9,\n        blockname: '10',\n        imagesrc: '#f47b79'\n    }\n];\n  \nconst blocks = [\n    {\n        blockid: '0',\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: '1',\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: '2',\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: '3',\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: '4',\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: '5',\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: '6',\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: '7',\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: '8',\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: '9',\n        blockname: '10',\n        imagesrc: '#f47b79'\n    },\n    {\n        blockid: 'a',\n        blockname: '11',\n        imagesrc: '#c6e2d4'\n    },\n    {\n        blockid: 'b',\n        blockname: '12',\n        imagesrc: '#b6d3c2'\n    },\n    {\n        blockid: 'c',\n        blockname: '13',\n        imagesrc: '#e0b1cb'\n    },\n    {\n        blockid: 'd',\n        blockname: '14',\n        imagesrc: '#d0a7b7'\n    },\n    {\n        blockid: 'e',\n        blockname: '15',\n        imagesrc: '#f3d1d3'\n    },\n    {\n        blockid: 'f',\n        blockname: '16',\n        imagesrc: '#e9b8c8'\n    }\n];\n\n  \n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor(w, h) {\n        this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.data = null;\n        this.numchunks = null;\n    }\n\n    getValues(offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        numchunks.x = Math.ceil(this.canvasdimensions.x/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(this.canvasdimensions.y/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    setMatrix(dimn, start, lines) {\n\n        let coords = [];\n\n        let grid = Array(dimn.x);\n        for (let i=0;i<dimn.x;i++) {\n            grid[i] = Array(dimn.y);\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n\n        let map_grid = this;\n        // console.log(coords);\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                console.log([...new Uint8Array(chunkbuffer)].map(x => x.toString(16).padStart(2, '0')));\n                map_grid.data = chunkbuffer;\n                map_grid.numchunks = dimn;\n                // console.log(new Uint32Array(chunkbuffer));\n\n                // let bufferread = new Uint32Array(chunkbuffer);\n\n                // // console.log(bufferread);\n\n                // // let chunkbufferlength = dimn.x*dimn.y;\n\n                // let bufferoffset = 0;\n\n                // for (let i=0;i<dimn.x;i++) {\n                //     for (let j=0;j<dimn.y;j++) {\n                        \n                //         grid[i][j] = new Chunk(i+start.x, j+start.y, bufferread.slice(bufferoffset,bufferoffset+(CHUNKSIZE*CHUNKSIZE)-1)); // trying to get buffer from chunkdata - buffer not implemented yet\n                //         bufferoffset+=(CHUNKSIZE*CHUNKSIZE);\n                //     }\n                // }\n                // map_grid.matrix = grid;\n                // console.log(map_grid.matrix);\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const cell_i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const cell_k = currentcell.x - (cell_i+startpoint.x)*CHUNKSIZE;\n\n        const cell_j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const cell_l = currentcell.y - (cell_j+startpoint.y)*CHUNKSIZE;\n\n\n        return {cell_i, cell_j, cell_k, cell_l};\n    }\n\n    addCell(index,colorhex) {\n        let data = new Uint32Array(this.data);\n        data[index] = colorhex;\n        // console.log(data[index], colorhex);\n    }\n}\n\nclass Chunk {\n    constructor (x, y, chunkcells=[]) {\n        this.x = x;\n        this.y = y;\n        \n        this.data = new ArrayBuffer(4*(CHUNKSIZE*CHUNKSIZE));\n\n        if (chunkcells.length) {\n            let data = new Uint32Array(this.data);\n            for (let i=0;i<chunkcells.length;i++) {\n                data[i] = chunkcells[i];\n            }\n        }\n        \n    }\n    // id needs to be 32 bit (4 byte) uint\n    addCell(x,y,id) {\n        let data = new Uint32Array(this.data);\n        data[(x*CHUNKSIZE+y)] = id;\n    }\n    \n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 255*255, \n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0\n        };\n\n        this.changeColor = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                console.log(blockid.substring(1));\n                console.log(out_num);\n                this.setState({color_selected: out_num});\n            }\n            else if (typeof blockid === 'number') {\n                this.setState({color_selected: blockid});\n            }\n        };\n        this.getColorSelected = () => {\n            //eg. ff00ff\n            // return parseInt(this.state.block_selected, 16);\n            return this.state.color_selected;\n        };\n        this.getDebugMode = () => {return this.state.debug_mode};\n\n        this.isSelected = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof blockid === 'number') {\n                return (blockid===this.state.color_selected)\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n        // this.getData();\n    }\n\n    getData() {\n\n        const buffer = new ArrayBuffer(4*256);\n        const int32View = new Int32Array(buffer);\n\n        for (let i = 0; i < int32View.length; i++) {\n            int32View[i] = i * 2;\n          };\n        fetch('/test',{\n            method: 'POST',\n            headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/octet-stream'},\n            body: buffer\n        })\n        .then((res) => res.json())\n        .then((message) => {});\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas getDebugMode={this.getDebugMode} changeUpdateTime={this.changeUpdateTime} changeDrawTime={this.changeDrawTime} getColorSelected={this.getColorSelected} changeCursorLoc={this.changeCursorLoc} changeOffsetLoc={this.changeOffsetLoc} changeChunkLoc={this.changeChunkLoc}/>\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor}/>\n                <div className='drawer primary'>\n                {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                    ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                    <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                    <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                    <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                    <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                </div>):null}\n                <b>Instructions:</b><br/>This is a pixel art canvas with infinite area. Scroll to zoom in and out, right click to pan around, and use left click to draw on the canvas.\n                <br/>Use the palette on the right to select your colour.\n                <div style={{color: `#909090`}}>(!!!!) Be aware that there is no saving yet lol, also this is just a prototype so limited colours, no drawing tools etc.</div>\n                <input type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getDebugMode = props.getDebugMode;\n        this.getColorSelected = props.getColorSelected;\n        this.changeUpdateTime = props.changeUpdateTime;\n        this.changeDrawTime = props.changeDrawTime;\n\n        this.changeCursorLoc = props.changeCursorLoc;\n        this.changeOffsetLoc = props.changeOffsetLoc;\n        this.changeChunkLoc = props.changeChunkLoc;\n\n        this.drawLines = [];\n\n        this.scale = 16;\n        this.tempscale = this.scale;\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n\n        this.canvas = null;\n    }\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n\n        // this.resizeCanvas(this.canvas);\n        const { width, height } = this.canvas.getBoundingClientRect();\n        this.map_grid = new Map(width, height);\n\n        setTimeout(this.updateCanvas(), 1000);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x,y);\n        // console.log(`cursor at (${x.toFixed(1)},${y.toFixed(1)})`);\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint) {\n        let start =  Date.now();\n\n        this.resizeCanvas(canvas);\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // finding location in terms of iterators of current cell\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, startpoint);\n\n        let blockid;\n        let x;\n        let y;\n\n        let mapoffset_x = Math.round(this.mapoffset.x);\n        let mapoffset_y = Math.round(this.mapoffset.y);\n\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k)+mapoffset_x)*(this.scale);\n            y = (((j+startpoint.y)*CHUNKSIZE+l)+mapoffset_y)*(this.scale);\n            if (x%1!=0||y%1!=0||this.scale%1!=0) console.log(\"ALERT:\", x, y, this.scale);\n            ctx.fillRect(x, y, this.scale, this.scale);\n            // console.log(x,y,cellapparentsize);\n        }\n        if (this.map_grid.data === null) return;\n        // for map\n\n\n        let chunkbufferoffset = 0;\n        let data = new Uint32Array(this.map_grid.data);\n\n        if (this.getDebugMode()) ctx.beginPath();\n        for (let i=0;i<this.map_grid.numchunks.x;i++) {\n            for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                // for each chunk\n                if (this.getDebugMode()) {\n                    x = (((i+startpoint.x)*CHUNKSIZE)+this.mapoffset.x)*(this.scale);\n                    y = (((j+startpoint.y)*CHUNKSIZE)+this.mapoffset.y)*(this.scale);\n\n                    ctx.fillStyle = \"#000000\";\n                    ctx.lineWidth = 0.01*Math.floor(this.scale);\n                    ctx.moveTo(x, 0);\n                    ctx.lineTo(x, this.canvas.height/2);\n                    // ctx.stroke();\n                    ctx.moveTo(0, y);\n                    ctx.lineTo(this.canvas.width/2, y);\n                }\n                for (let c=0;c<(CHUNKSIZE*CHUNKSIZE);c++) {\n                    let k = Math.floor(c/CHUNKSIZE);\n                    let l = c-(k*CHUNKSIZE);\n\n                    // if (typeof this.map_grid.matrix[i][j] === 'undefined') continue;\n\n                    blockid = data[chunkbufferoffset+c];\n                    // if (c%100===0) console.log(blockid);\n\n                    if (blockid!==16777215){\n                        // ctx.fillStyle = blockid.toString(16);\n                        ctx.fillStyle = \"#\" + (blockid & 0x00FFFFFF).toString(16).padStart(6, '0');\n                        // if (c===0) console.log((blockid & 0x00FFFFFF).toString(16).padStart(6, '0'))\n                        doFill(i,j,k,l,blockid);\n                    }\n                }\n                chunkbufferoffset += (CHUNKSIZE*CHUNKSIZE);\n            }\n        }\n        if (this.getDebugMode()) ctx.stroke();\n        // ctx.fillStyle = \"#\" + this.getColorSelected() + \"8f\"; // placeholder until get images\n        // console.log(this.getColorSelected());\n        // console.log((this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0'));\n        ctx.fillStyle = \"#\"+(this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0')+\"ff\";\n        doFill(cell_i,cell_j,cell_k,cell_l);\n\n        this.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.mapoffset.multipliedby(this.scale), this.scale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend)\n        .then(()=>{\n            this.drawMap(this.canvas, startpoint);\n            this.startpoint = startpoint;\n            this.changeUpdateTime(Date.now()-start);\n        });\n\n        setTimeout(()=>{this.updateCanvas()}, 1000);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = Math.floor((width*ratio)/this.scale)*this.scale;\n          canvas.height = Math.floor((height*ratio)/this.scale)*this.scale;;\n        //   console.log(canvas.width, canvas.height);\n          context.scale(ratio, ratio);\n          return true;\n        }\n    \n        return false\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n        // console.log(`Insertion coords: x:${cell_i} y:${cell_j}`);\n\n        let dataindex = cell_i*(this.map_grid.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+cell_j*(CHUNKSIZE*CHUNKSIZE)+cell_k*CHUNKSIZE+cell_l;\n\n        let dataview = new Uint32Array(this.map_grid.data);\n\n        if (dataindex < dataview.length) this.map_grid.addCell(dataindex, this.getColorSelected());\n\n        // console.log(`cell drawn at index ${dataindex}`);\n        // console.log(`New cell is ${dataview[dataindex]}`);\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) {\n\n                // plotLine(this.currentcell, newcurrentcell, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n                this.drawLine(this.currentcell,newcurrentcell);\n            }\n            this.currentcell = newcurrentcell;\n            update = true;\n            this.changeCursorLoc(this.currentcell);\n            let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.changeChunkLoc(cell_i+this.startpoint.x,cell_j+this.startpoint.y);\n\n        }\n        \n        return update;\n    }\n\n    drawLine(p1,p2) {\n\n        plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n\n        this.drawLines.push({p1:p1,p2:p2,offset:this.celloffset,blockid:this.getColorSelected()});\n    }\n\n    render() {\n        return (\n            <div>\n            <canvas \n                ref={this.canvasRef} \n                className='map-canvas primary'\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        this.lmousedown=true;\n                        this.drawLine(this.currentcell,this.currentcell);\n                        this.drawMap(this.canvas, this.startpoint);\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    let update = false;\n\n                    update = this.moveCursor(e);\n\n                    if (update) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    e.preventDefault();\n                    let newscale = this.tempscale - Math.round(e.deltaY)/1000;\n                    console.log(this.scale, this.tempscale);\n                    if (newscale>5) this.tempscale = newscale;\n                    else this.tempscale = 5;\n                    this.scale = Math.round(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas>\n            </div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.changeColor = props.changeColor;\n\n        this.handleChange = (e) => {\n            this.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    blocks.map(button => (\n                        <div \n                            key={button.blockid} \n                            style={{backgroundColor: `${button.imagesrc}`}} \n                            className={`blockbutton` + (this.props.isSelected(button.imagesrc) ? \"selected\" : \"\")}\n                            onClick={() => {this.changeColor(button.imagesrc)}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n                <input type={\"color\"} onChange={this.handleChange}></input>\n                {/* <input type={\"submit\"} value={\"Apply\"}></input> */}\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}