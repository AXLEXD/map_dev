{"ast":null,"code":"var noop = function noop() {};\nvar Emitter;\nif (!module.browser) {\n  Emitter = require('events').EventEmitter; // node-only\n} else {\n  Emitter = function Emitter() {\n    this._events = {};\n  };\n  Emitter.prototype.on = Emitter.prototype.addListener = function (name, listener) {\n    this.emit('newListener', name, listener);\n    (this._events[name] = this._events[name] || []).push(listener);\n    return this;\n  };\n  Emitter.prototype.once = function (name, listener) {\n    var self = this;\n    var onevent = function onevent() {\n      self.removeListener(name, listener);\n      listener.apply(this, arguments);\n    };\n    onevent.listener = listener;\n    return this.on(name, onevent);\n  };\n  Emitter.prototype.emit = function (name) {\n    var listeners = this._events[name];\n    if (!listeners) {\n      return;\n    }\n    var args = Array.prototype.slice.call(arguments, 1);\n    listeners = listeners.slice();\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i].apply(null, args);\n    }\n  };\n  Emitter.prototype.removeListener = function (name, listener) {\n    var listeners = this._events[name];\n    if (!listeners) {\n      return this;\n    }\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i].listener === listener) {\n        listeners.splice(i, 1);\n        break;\n      }\n    }\n    if (!listeners.length) {\n      delete this._events[name];\n    }\n    return this;\n  };\n  Emitter.prototype.removeAllListeners = function (name) {\n    if (!arguments.length) {\n      this._events = {};\n      return this;\n    }\n    delete this._events[name];\n    return this;\n  };\n  Emitter.prototype.listeners = function (name) {\n    return this._events[name] || [];\n  };\n}\nObject.create = Object.create || function (proto) {\n  var C = function C() {};\n  C.prototype = proto;\n  return new C();\n};\nexports.extend = function (proto, fn) {\n  var C = function C() {\n    proto.call(this);\n    fn.apply(this, arguments);\n  };\n  C.prototype = Object.create(proto.prototype);\n  return C;\n};\nexports.createEmitter = function () {\n  return new Emitter();\n};\nexports.emitter = function (fn) {\n  return exports.extend(Emitter, fn);\n};\n\n// functional patterns below\n\nexports.fork = function (a, b) {\n  return function (err, value) {\n    if (err) {\n      a(err);\n      return;\n    }\n    b(value);\n  };\n};\nexports.step = function (funcs, onerror) {\n  var counter = 0;\n  var completed = 0;\n  var pointer = 0;\n  var ended = false;\n  var state = {};\n  var values = null;\n  var complete = false;\n  var check = function check() {\n    return complete && completed >= counter;\n  };\n  var next = function next(err, value) {\n    if (err && !ended) {\n      ended = true;\n      (onerror || noop).apply(state, [err]);\n      return;\n    }\n    if (ended || counter && !check()) {\n      return;\n    }\n    var fn = funcs[pointer++];\n    var args = fn.length === 1 ? [next] : [value, next];\n    counter = completed = 0;\n    values = [];\n    complete = false;\n    fn.apply(state, pointer < funcs.length ? args : [value, next]);\n    complete = true;\n    if (counter && check()) {\n      next(null, values);\n    }\n  };\n  next.parallel = function (key) {\n    var index = counter++;\n    if (complete) {\n      throw new Error('next.parallel must not be called async');\n    }\n    return function (err, value) {\n      completed++;\n      values[key ? key : index] = value;\n      next(err, values);\n    };\n  };\n  next.skip = function (step) {\n    pointer += step;\n    return function (err, value) {\n      next(err, value);\n    };\n  };\n  next();\n};\nexports.memoizer = function (fn) {\n  var cache = {};\n  var stringify = function stringify(obj) {\n    var type = typeof obj;\n    if (type !== 'object') {\n      return type + ': ' + obj;\n    }\n    var keys = [];\n    for (var i in obj) {\n      keys.push(stringify(obj[i]));\n    }\n    return keys.sort().join('\\n');\n  };\n  return function () {\n    var key = '';\n    for (var i = 0; i < arguments.length; i++) {\n      key += stringify(arguments[i]) + '\\n';\n    }\n    cache[key] = cache[key] || fn.apply(null, arguments);\n    return cache[key];\n  };\n};\nexports.curry = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function () {\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments)));\n  };\n};\nexports.once = function (fn) {\n  var once = true;\n  return function () {\n    if (once) {\n      once = false;\n      (fn || noop).apply(null, arguments);\n      return true;\n    }\n    return false;\n  };\n};\nexports.future = function () {\n  var that = {};\n  var stack = [];\n  that.get = function (fn) {\n    stack.push(fn);\n  };\n  that.put = function (a, b) {\n    that.get = function (fn) {\n      fn(a, b);\n    };\n    while (stack.length) {\n      stack.shift()(a, b);\n    }\n  };\n  return that;\n};\n\n// utilities below\n\nexports.encode = function (num) {\n  var ALPHA = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  return function (i) {\n    return i < ALPHA.length ? ALPHA.charAt(i) : exports.encode(Math.floor(i / ALPHA.length)) + ALPHA.charAt(i % ALPHA.length);\n  };\n}();\nexports.uuid = function () {\n  var inc = 0;\n  return function () {\n    var uuid = '';\n    for (var i = 0; i < 36; i++) {\n      uuid += exports.encode(Math.floor(Math.random() * 62));\n    }\n    return uuid + '-' + exports.encode(inc++);\n  };\n}();\nexports.gensym = function () {\n  var s = 0;\n  return function () {\n    return 's' + s++;\n  };\n}();\nexports.join = function () {\n  var result = {};\n  for (var i = 0; i < arguments.length; i++) {\n    var a = arguments[i];\n    for (var j in a) {\n      result[j] = a[j];\n    }\n  }\n  return result;\n};\nexports.format = function (str, col) {\n  col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);\n  return str.replace(/\\{([^{}]+)\\}/gm, function () {\n    return col[arguments[1]] === undefined ? arguments[0] : col[arguments[1]];\n  });\n};\nexports.log = function (str) {\n  if (typeof window !== 'undefined' && !window.console) {\n    return;\n  }\n  console.log(str);\n};","map":null,"metadata":{},"sourceType":"script"}