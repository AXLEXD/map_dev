{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","DRAWTOOL","MOVETOOL","colors","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","plotLine","p1","p2","offset","Math","abs","colorTo32Uint","colorstring","parseInt","substring","colorToString","colornum","toString","padStart","Vector2D","_classCallCheck","_createClass","othervector","number","Map","data","dataview","numchunks","cellsize","canvas","scale","chunkpixels","startpoint","floor","_canvas$getBoundingCl","getBoundingClientRect","width","height","ceil","_setMatrix","_asyncToGenerator","_callee","dimn","start","lines","changeTranscodeTime","coords","map_grid","j","coordsobj","_context","fetch","headers","Accept","Content-Type","body","JSON","stringify","arrayBuffer","chunkbuffer","current","Date","now","ArrayBuffer","byteLength","Uint32Array","Uint32data","k","l","bmp_index","color","getDataIndex","finalcolor","a","b","relative_index","_x","_x2","_x3","_x4","_x5","apply","arguments","currentcell","index","colorhex","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","tool_mode","debug_mode","show_stats","color_selected","update","time","tot_time","num_updates","transcode","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","cxstart","cystart","cxend","cyend","getColorSelected","getDebugMode","getToolMode","changeToolMode","change_to","setState","changeColor","out_num","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","filename","x2","y2","response","get","split","blob","pngblob","url","window","URL","createObjectURL","link","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","_this2","React","className","MapCanvas","toolmode","Palette","position","right","round","onClick","checked","onChange","defaultValue","e","target","mapDownload","src","alt","Component","_React$Component2","_this3","drawLines","lastdraw","tempscale","cellpos","canvasRef","createRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","mousepos","replacecanvas","is_updating","drawcache","_this4","resizeCanvas","addEventListener","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","pos","end","transform","setTo","isupdate","_this5","doFill","mapoffset_x","mapoffset_y","ctx","fillRect","imageData","ImageData","Uint8ClampedArray","getContext","rctx","clearRect","putImageData","_canvas$getBoundingCl2","fillStyle","offset_x","offset_y","drawImage","beginPath","lineWidth","moveTo","lineTo","stroke","linearray","line","currentpos","_this5$map_grid$getCh","getChunkPosOffset","blockid","_this6","tempupdatescale","_this$map_grid$getVal","getValues","multipliedby","linestosend","setMatrix","canvasscale","drawMap","shift","_canvas$getBoundingCl3","_window$devicePixelRa","devicePixelRatio","ratio","scalex","scaley","_this$map_grid$getChu","dataindex","addCell","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","drawobj","_this8","ref","cursor","getCursor","onContextMenu","preventDefault","onMouseDown","button","console","log","_this8$map_grid$getCh","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","oldtempscale","scalenum","_React$Component3","_this9","handleChange","_this10","map","backgroundColor","concat","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fc6ca4a4.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst UPDATEPERIOD = 1000;\n\nconst CHUNKSIZE = 16;\n\nconst LOWESTSCALE = 1;\n\nconst DRAWTOOL = 0;\nconst EYEDROPTOOL = 1;\nconst MOVETOOL = 2;\n  \n// const blocks = [\n//     {\n//         blockid: '0',\n//         blockname: '1',\n//         imagesrc: '#ffffff'\n//     },\n//     {\n//         blockid: '1',\n//         blockname: '2',\n//         imagesrc: '#d1e7dc'\n//     },\n//     {\n//         blockid: '2',\n//         blockname: '3',\n//         imagesrc: '#c4d4e1'\n//     },\n//     {\n//         blockid: '3',\n//         blockname: '4',\n//         imagesrc: '#bcb5d3'\n//     },\n//     {\n//         blockid: '4',\n//         blockname: '5',\n//         imagesrc: '#f5dbe2'\n//     },\n//     {\n//         blockid: '5',\n//         blockname: '6',\n//         imagesrc: '#eeb6c9'\n//     },\n//     {\n//         blockid: '6',\n//         blockname: '7',\n//         imagesrc: '#c49abf'\n//     },\n//     {\n//         blockid: '7',\n//         blockname: '8',\n//         imagesrc: '#bada55'\n//     },\n//     {\n//         blockid: '8',\n//         blockname: '9',\n//         imagesrc: '#ffd700'\n//     },\n//     {\n//         blockid: '9',\n//         blockname: '10',\n//         imagesrc: '#f47b79'\n//     },\n//     {\n//         blockid: 'a',\n//         blockname: '11',\n//         imagesrc: '#c6e2d4'\n//     },\n//     {\n//         blockid: 'b',\n//         blockname: '12',\n//         imagesrc: '#b6d3c2'\n//     },\n//     {\n//         blockid: 'c',\n//         blockname: '13',\n//         imagesrc: '#e0b1cb'\n//     },\n//     {\n//         blockid: 'd',\n//         blockname: '14',\n//         imagesrc: '#d0a7b7'\n//     },\n//     {\n//         blockid: 'e',\n//         blockname: '15',\n//         imagesrc: '#f3d1d3'\n//     },\n//     {\n//         blockid: 'f',\n//         blockname: '16',\n//         imagesrc: '#e9b8c8'\n//     }\n// ];\n\nconst colors = [\n    \"#000000\", // Black\n    \"#FFFFFF\", // White\n    \"#FF0000\", // Red\n    \"#00FF00\", // Green\n    \"#0000FF\", // Blue\n    \"#FFFF00\", // Yellow\n    \"#FF00FF\", // Magenta\n    \"#00FFFF\", // Cyan\n    \"#800000\", // Maroon\n    \"#008000\", // Olive\n    \"#000080\", // Navy\n    \"#808000\", // Olive Drab\n    \"#800080\", // Purple\n    \"#008080\", // Teal\n    \"#808080\", // Gray\n    \"#C0C0C0\", // Silver\n    \"#FFC0CB\", // Pink\n    \"#FFA07A\", // Light Salmon\n    \"#FF7F50\", // Coral\n    \"#FF6347\", // Tomato\n    \"#FF4500\", // Orange Red\n    \"#FF8C00\", // Dark Orange\n    \"#FFD700\", // Gold\n    \"#FFFFE0\", // Light Yellow\n    \"#EEE8AA\", // Pale Goldenrod\n    \"#ADFF2F\", // Green Yellow\n    \"#32CD32\", // Lime Green\n    \"#00FA9A\", // Medium Spring Green\n    \"#00CED1\", // Dark Turquoise\n    \"#6A5ACD\", // Slate Blue\n    \"#7B68EE\", // Medium Slate Blue\n    \"#FF69B4\", // Hot Pink\n    \"#8B4513\" // Saddle Brown\n  ];\n  \n\n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nfunction colorTo32Uint(colorstring) {\n    return parseInt(colorstring.substring(1), 16);\n}\nfunction colorToString(colornum) {\n    return \"#\" + (colornum & 0x00FFFFFF).toString(16).padStart(6, '0');\n}\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor() {\n        // this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.data = null;\n        this.dataview = null;\n        this.numchunks = null;\n        this.cellsize = 2;\n    }\n\n    getValues(canvas, offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        const { width, height } = canvas.getBoundingClientRect();\n\n        numchunks.x = Math.ceil(width/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(height/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    async setMatrix(dimn, start, lines, cellsize, changeTranscodeTime) {\n\n        let coords = [];\n        let map_grid = this;\n\n        for (let i=0;i<dimn.x;i++) {\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                \n                map_grid.numchunks = dimn;\n                let current = Date.now();\n\n                // const cellsize = 10;\n                map_grid.data = new ArrayBuffer(chunkbuffer.byteLength*cellsize*cellsize);\n                map_grid.dataview = new Uint32Array(map_grid.data);\n\n                let Uint32data = new Uint32Array(chunkbuffer);\n                \n                for (let i=0;i<map_grid.numchunks.x;i++) {\n                    for (let j=0;j<map_grid.numchunks.y;j++) {\n                        for (let k=0;k<CHUNKSIZE;k++) {\n                            for (let l=0;l<CHUNKSIZE;l++) {\n                                let bmp_index = i*CHUNKSIZE*cellsize + j*map_grid.numchunks.x*(CHUNKSIZE*CHUNKSIZE)*cellsize*cellsize + k*cellsize + l*map_grid.numchunks.x*CHUNKSIZE*cellsize*cellsize;\n                                let alex_index = map_grid.getDataIndex(i,j,k,l);\n                                let color = Uint32data[alex_index];\n                                let finalcolor = ((color << 16)&0x00FF0000) | ((color)&0xFF00FF00) | ((color>>16)&0x000000FF);\n\n                                for (let a=0;a<cellsize;a++) {\n                                    for (let b=0;b<cellsize;b++) {\n                                        let relative_index = bmp_index + a + b*map_grid.numchunks.x*CHUNKSIZE*cellsize;\n                                        map_grid.dataview[relative_index] = finalcolor;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                map_grid.cellsize = cellsize;\n                changeTranscodeTime(Date.now()-current);\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const k = currentcell.x - (i+startpoint.x)*CHUNKSIZE;\n\n        const j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const l = currentcell.y - (j+startpoint.y)*CHUNKSIZE;\n\n\n        return {i, j, k, l};\n    }\n\n    addCell(index,colorhex) {\n        this.dataview[index] = colorhex;\n        // console.log(data[index], colorhex);\n    }\n    getDataIndex(i,j,k,l) {\n        return i*(this.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+j*(CHUNKSIZE*CHUNKSIZE)+k*CHUNKSIZE+l;\n    }\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tool_mode: MOVETOOL,\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 1672153, \n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            transcode: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0,\n\n            cxstart:0,\n            cystart:0,\n            cxend:0,\n            cyend:0\n        };\n\n        this.getColorSelected = () => {return this.state.color_selected};\n        this.getDebugMode = () => {return this.state.debug_mode};\n        this.getToolMode = () => {return this.state.tool_mode};\n\n        this.changeToolMode = (change_to) => {\n            this.setState({tool_mode: change_to});\n        }\n\n        this.changeColor = (color) => {\n            if (typeof color === 'string') {\n                let out_num = colorTo32Uint(color);\n                this.setState({color_selected: out_num});\n            }\n            else if (typeof color === 'number') {\n                this.setState({color_selected: color});\n            }\n            this.changeToolMode(DRAWTOOL);\n        };\n        this.isSelected = (color) => {\n            if (typeof color === 'string') {\n                let out_num = colorTo32Uint(color);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof color === 'number') {\n                return (color===this.state.color_selected);\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeTranscodeTime = (new_time) => {\n            this.setState({transcode:{\n                time: new_time, \n                tot_time: this.state.transcode.tot_time+new_time, \n                num_updates: this.state.transcode.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n    }\n\n    mapDownload() {\n        let filename;\n        let coordsobj = {x1:this.state.cxstart,y1:this.state.cystart,x2:this.state.cxend,y2:this.state.cyend};\n        if (coordsobj.x1===coordsobj.x2 || coordsobj.y1===coordsobj.y2 || coordsobj.x1>coordsobj.x2 || coordsobj.y1>coordsobj.y2) return;\n\n        fetch('/getimage',{\n            method: 'POST',\n            headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n            body: JSON.stringify(coordsobj)\n        }).then((response) => {\n            filename = response.headers.get('Content-Disposition').split('\"')[1];\n            return response.blob()\n        })\n        .then((pngblob) => {\n            const url = window.URL.createObjectURL(pngblob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download',filename);\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n        });\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas \n                    toolmode={this.state.tool_mode}\n                    getToolMode={this.getToolMode}\n                    changeToolMode={this.changeToolMode}\n                    getDebugMode={this.getDebugMode}\n                    changeUpdateTime={this.changeUpdateTime}\n                    changeTranscodeTime={this.changeTranscodeTime}\n                    changeDrawTime={this.changeDrawTime}\n                    getColorSelected={this.getColorSelected}\n                    changeCursorLoc={this.changeCursorLoc}\n                    changeOffsetLoc={this.changeOffsetLoc}\n                    changeChunkLoc={this.changeChunkLoc}\n                    changeColor={this.changeColor}\n                />\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor} color={this.state.color_selected}/>\n                <div className='drawer primary'>\n                    {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                        ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                        <br/>({this.state.transcode.time}ms, avg: {Math.round(this.state.transcode.tot_time/this.state.transcode.num_updates)}ms, {this.state.transcode.num_updates} transcodes);\n                        <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                        <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                        <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                        <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                    </div>):null}\n\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(DRAWTOOL)}}\n                    >draw</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(EYEDROPTOOL)}}\n                    >eyedrop</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(MOVETOOL)}}\n                    >move</div>\n                    \n\n                    <input checked={this.state.debug_mode} type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                    <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                    <table\n                        className={`download-wrapper`}\n                        // onClick={() => this.fileDownload()}\n                    ><tbody>\n                        <tr>\n                            <td>\n                                <p>from:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxstart:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cystart:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p>to:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxend:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cyend:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p >Save PNG:</p>\n                                <div className={`download-button`} onClick={() => this.mapDownload()}><img src='save.png' alt='save'/></div>\n                            </td>\n                        </tr>\n                    </tbody></table>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.drawLines = [];\n\n        this.lastdraw = 0;\n\n        this.scale = 4;\n        this.tempscale = this.scale;\n\n        this.cellpos = {i:0,j:0,k:0,l:0};\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n        this.mousepos = new Vector2D(0,0);\n\n        this.canvas = null;\n        this.replacecanvas = null;\n\n        this.is_updating = false;\n        this.drawcache = [];\n    }\n\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n        this.replacecanvas = document.createElement('canvas');\n        this.map_grid = new Map();\n        this.resizeCanvas(this.canvas);\n        window.addEventListener('resize', ()=>this.resizeCanvas(this.canvas));\n        setTimeout(this.updateCanvas(), UPDATEPERIOD);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x/(this.tempscale/this.scale),y/(this.tempscale/this.scale));\n        this.mousepos = pos;\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.props.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint, isupdate) {\n        let start =  Date.now();\n        if (this.map_grid.data===null || this.map_grid.numchunks===null) return;\n        const cellsize = this.map_grid.cellsize;\n\n        let x,y;\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k))*(cellsize)+mapoffset_x;\n            y = (((j+startpoint.y)*CHUNKSIZE+l))*(cellsize)+mapoffset_y;\n            ctx.fillRect(x, y, cellsize, cellsize);\n            // console.log(x,y,cellapparentsize);\n        }\n\n        let length = this.map_grid.numchunks.x*CHUNKSIZE*cellsize;\n        if ((this.map_grid.data.byteLength*4)%length!==0) return;\n        let imageData = new ImageData(new Uint8ClampedArray(this.map_grid.data), length);\n\n        const ctx = canvas.getContext(\"2d\");\n\n        const rctx = this.replacecanvas.getContext(\"2d\");\n        rctx.clearRect(0,0,this.replacecanvas.width, this.replacecanvas.height);\n        rctx.putImageData(imageData, 0, 0);\n\n        const { width, height } = canvas.getBoundingClientRect();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, width, height);\n\n        let mapoffset_x = Math.floor(this.mapoffset.x*cellsize);\n        let mapoffset_y = Math.floor(this.mapoffset.y*cellsize);\n        let offset_x = startpoint.x*CHUNKSIZE*cellsize+mapoffset_x;\n        let offset_y = startpoint.y*CHUNKSIZE*cellsize+mapoffset_y;\n\n        {\n            ctx.drawImage(this.replacecanvas, offset_x, offset_y);\n            \n            if (this.props.getDebugMode()) {\n                ctx.beginPath();\n                for (let i=0;i<this.map_grid.numchunks.x;i++) {\n                    for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                        x = (((i+startpoint.x)*CHUNKSIZE))*cellsize+mapoffset_x;\n                        y = (((j+startpoint.y)*CHUNKSIZE))*cellsize+mapoffset_y;\n    \n                        ctx.fillStyle = \"#000000\";\n                        ctx.lineWidth = 0.01*Math.floor(this.scale);\n                        ctx.moveTo(x, 0);\n                        ctx.lineTo(x, height);\n                        // ctx.stroke();\n                        ctx.moveTo(0, y);\n                        ctx.lineTo(width, y);\n                    }\n                }\n                ctx.stroke();\n            }\n\n            this.drawcache.forEach((linearray)=>{\n                linearray.forEach((line)=>{\n                    plotLine(line.p1, line.p2, line.offset, (x,y)=>{\n                        const currentpos = new Vector2D(x-line.offset.x,y-line.offset.y);\n                        const {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n                        ctx.fillStyle = colorToString(line.blockid);\n                        doFill(i, j, k, l);\n                    });\n                })\n            });\n\n            if (this.props.toolmode===DRAWTOOL) {\n                // doFill(this.cellpos);\n                ctx.fillStyle = colorToString(this.props.getColorSelected())+\"ff\";\n                doFill(this.cellpos.i, this.cellpos.j, this.cellpos.k, this.cellpos.l);\n            }\n        };\n\n        this.props.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let tempupdatescale = Math.floor(this.tempscale);\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.canvas, this.mapoffset.multipliedby(tempupdatescale), tempupdatescale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.is_updating = true;\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend, tempupdatescale, this.props.changeTranscodeTime)\n        .then(()=>{\n            \n\n            this.replacecanvas.width = tempupdatescale*numchunks.x*CHUNKSIZE;\n            this.replacecanvas.height = tempupdatescale*numchunks.y*CHUNKSIZE;    \n\n            // this.canvas.getContext('2d').resetTransform();\n            this.resizeCanvas(this.canvas);\n            this.canvasscale(this.canvas, this.tempscale/tempupdatescale, this.tempscale/tempupdatescale)\n            this.scale = Math.floor(this.tempscale)\n            this.startpoint = startpoint;\n            this.drawMap(this.canvas, startpoint, true);\n\n            this.props.changeUpdateTime(Date.now()-start);\n            this.is_updating = false;\n        }).then(()=>{\n            // this.drawcache.forEach((draw) => {draw()});\n            this.drawcache.push([]);\n            if (this.drawcache.length>4) {\n                this.drawcache.shift();\n            }\n            \n        });\n\n        setTimeout(()=>{this.updateCanvas()}, UPDATEPERIOD);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = (1*width*ratio);\n          canvas.height = (1*height*ratio);\n          context.scale(ratio, ratio);\n        //   canvas.style.width = `${width}px`;\n        //   canvas.style.height = `${height}px`;\n          return true;\n        }\n    \n        return false\n    }\n\n    canvasscale(canvas, scalex, scaley) {\n        // let mousepos = this.mousepos;\n        const ctx = canvas.getContext('2d');\n        // const transx = mousepos.x;\n        // const transy = mousepos.y;\n        // ctx.translate(transx, transy);\n        ctx.scale(scalex, scaley);\n        // ctx.translate(-transx, -transy);\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n        let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n        if (dataindex < this.map_grid.data.byteLength/4) this.map_grid.addCell(dataindex, this.props.getColorSelected());\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        // Drawing line and updating stats\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) this.drawLine(this.currentcell,newcurrentcell);\n            this.currentcell = newcurrentcell;\n            this.cellpos = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.props.changeCursorLoc(this.currentcell);\n            this.props.changeChunkLoc(this.cellpos.i+this.startpoint.x,this.cellpos.j+this.startpoint.y);\n            update = true;\n        }\n        return update;\n    }\n\n    drawLine(p1,p2) {\n        // let thisdraw = ()=>{plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y))};\n        let thisdraw = ()=>{\n            let pixels = [];\n            plotLine(p1, p2, this.celloffset, (x,y)=>{pixels.push({x:x,y:y, blockid:this.props.getColorSelected()})});\n            return pixels;\n        };\n        // this.drawcache.push(thisdraw());\n        // thisdraw();\n        // if (this.is_updating) {this.drawcache.push(thisdraw)};\n        let drawobj = {p1:p1,p2:p2,offset:this.celloffset,blockid:this.props.getColorSelected()};\n        this.drawcache[this.drawcache.length-1].push(drawobj);\n        this.drawLines.push(drawobj);\n    }\n\n    render() {\n        let getCursor = ()=>{\n            switch (this.props.toolmode) {\n                case EYEDROPTOOL:\n                    return \"crosshair\";\n                case MOVETOOL:\n                    return \"move\";\n                default:\n                    return \"default\";\n            }\n        }\n        return (<div>\n            {/* <canvas ref={this.canvasRef2} style={{visibility:\"hidden\"}}></canvas> */}\n            <canvas \n                ref={this.canvasRef}\n                className='map-canvas primary'\n                style={{cursor:getCursor()}}\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        switch (this.props.toolmode) {\n                            case EYEDROPTOOL:\n                                console.log(\"eyedroptool used\");\n                                let {i,j,k,l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n                                let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n                                this.props.changeColor(this.map_grid.dataview[dataindex]);\n                                // this.props.changeToolMode(DRAWTOOL);\n                                break;\n                            case MOVETOOL:\n                                this.rmousedown=true;\n                                break;\n                            default:\n                                this.lmousedown=true;\n                                this.drawLine(this.currentcell,this.currentcell);\n                                this.drawMap(this.canvas, this.startpoint);\n                                break;\n                        }\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    if (this.moveCursor(e)) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    let newscale = this.tempscale - Math.floor(e.deltaY)/1000;\n                    // console.log(this.scale, this.tempscale);\n                    let oldtempscale = this.tempscale;\n                    if (newscale>LOWESTSCALE) this.tempscale = newscale;\n                    else this.tempscale = LOWESTSCALE;\n                    let oldscale = this.scale;\n                    console.log(this.tempscale);\n                    const scalenum = this.tempscale/oldtempscale;\n                    this.canvasscale(this.canvas, scalenum, scalenum);\n                    // this.scale = Math.floor(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas></div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = (e) => {\n            this.props.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    colors.map((color,index) => (\n                        <div \n                            key={index} \n                            style={{backgroundColor: `${color}`}} \n                            className={`blockbutton` + (this.props.isSelected(color) ? \"selected\" : \"\")}\n                            onClick={() => {this.props.changeColor(color);}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n                <input value={this.props.color} type={\"color\"} onChange={this.handleChange} ></input>\n                {/* <input type={\"submit\"} value={\"Apply\"}></input> */}\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}