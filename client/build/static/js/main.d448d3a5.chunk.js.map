{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["blocks","blockid","blockname","imagesrc","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","Vector2D","_classCallCheck","this","_createClass","key","value","othervector","number","Map","w","h","canvasdimensions","data","dataview","numchunks","offset","scale","chunkpixels","startpoint","Math","floor","ceil","dimn","start","lines","coords","map_grid","i","j","coordsobj","push","Promise","resolve","reject","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","arrayBuffer","chunkbuffer","Uint32Array","currentcell","cell_i","cell_k","cell_j","cell_l","index","colorhex","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","call","state","tool_mode","debug_mode","show_stats","color_selected","update","time","tot_time","num_updates","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","getColorSelected","getDebugMode","getToolMode","changeColor","out_num","parseInt","substring","console","log","setState","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","_this2","React","createElement","className","MapCanvas","Palette","position","right","round","color","type","onChange","checked","Component","_React$Component2","_this3","drawLines","tempscale","canvasRef","createRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","canvas","current","_this$canvas$getBound","getBoundingClientRect","width","height","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","end","transform","setTo","_this4","Date","now","resizeCanvas","ctx","getContext","clearRect","fillStyle","fillRect","_this$map_grid$getChu","getChunkPosOffset","mapoffset_x","mapoffset_y","doFill","k","l","chunkbufferoffset","beginPath","lineWidth","moveTo","lineTo","c","CHUNKSIZE","toString","padStart","stroke","_this5","_this$map_grid$getVal","getValues","multipliedby","linestosend","setMatrix","drawMap","_canvas$getBoundingCl","_window$devicePixelRa","window","devicePixelRatio","ratio","context","currentpos","_this$map_grid$getChu2","dataindex","byteLength","addCell","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","_this$map_grid$getChu3","p1","p2","_this6","abs","plotLine","drawCellAtMouse","_this7","ref","onContextMenu","e","preventDefault","onMouseDown","button","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","_React$Component3","_this8","handleChange","target","_this9","map","backgroundColor","concat","onClick","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d448d3a5.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst CHUNKSIZE = 16;\n\nconst blocksold = [\n    {\n        blockid: 0,\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: 1,\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: 2,\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: 3,\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: 4,\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: 5,\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: 6,\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: 7,\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: 8,\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: 9,\n        blockname: '10',\n        imagesrc: '#f47b79'\n    }\n];\n  \nconst blocks = [\n    {\n        blockid: '0',\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: '1',\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: '2',\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: '3',\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: '4',\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: '5',\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: '6',\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: '7',\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: '8',\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: '9',\n        blockname: '10',\n        imagesrc: '#f47b79'\n    },\n    {\n        blockid: 'a',\n        blockname: '11',\n        imagesrc: '#c6e2d4'\n    },\n    {\n        blockid: 'b',\n        blockname: '12',\n        imagesrc: '#b6d3c2'\n    },\n    {\n        blockid: 'c',\n        blockname: '13',\n        imagesrc: '#e0b1cb'\n    },\n    {\n        blockid: 'd',\n        blockname: '14',\n        imagesrc: '#d0a7b7'\n    },\n    {\n        blockid: 'e',\n        blockname: '15',\n        imagesrc: '#f3d1d3'\n    },\n    {\n        blockid: 'f',\n        blockname: '16',\n        imagesrc: '#e9b8c8'\n    }\n];\n\n  \n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor(w, h) {\n        this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.data = null;\n        this.dataview = null;\n        this.numchunks = null;\n    }\n\n    getValues(offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        numchunks.x = Math.ceil(this.canvasdimensions.x/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(this.canvasdimensions.y/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    setMatrix(dimn, start, lines) {\n\n        let coords = [];\n        let map_grid = this;\n\n        for (let i=0;i<dimn.x;i++) {\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                // console.log([...new Uint8Array(chunkbuffer)].map(x => x.toString(16).padStart(2, '0')));\n                map_grid.data = chunkbuffer;\n                map_grid.dataview = new Uint32Array(map_grid.data);\n                map_grid.numchunks = dimn;\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const cell_i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const cell_k = currentcell.x - (cell_i+startpoint.x)*CHUNKSIZE;\n\n        const cell_j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const cell_l = currentcell.y - (cell_j+startpoint.y)*CHUNKSIZE;\n\n\n        return {cell_i, cell_j, cell_k, cell_l};\n    }\n\n    addCell(index,colorhex) {\n        this.dataview[index] = colorhex;\n        // console.log(data[index], colorhex);\n    }\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tool_mode: 0,\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 255*255, \n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0,\n        };\n\n        this.getColorSelected = () => {return this.state.color_selected};\n        this.getDebugMode = () => {return this.state.debug_mode};\n        this.getToolMode = () => {return this.state.tool_mode};\n\n        this.changeColor = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                console.log(blockid.substring(1));\n                console.log(out_num);\n                this.setState({color_selected: out_num});\n            }\n            else if (typeof blockid === 'number') {\n                this.setState({color_selected: blockid});\n            }\n        };\n        this.isSelected = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof blockid === 'number') {\n                return (blockid===this.state.color_selected)\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas \n                    getToolMode={this.getToolMode}\n                    getDebugMode={this.getDebugMode}\n                    changeUpdateTime={this.changeUpdateTime}\n                    changeDrawTime={this.changeDrawTime}\n                    getColorSelected={this.getColorSelected}\n                    changeCursorLoc={this.changeCursorLoc}\n                    changeOffsetLoc={this.changeOffsetLoc}\n                    changeChunkLoc={this.changeChunkLoc}\n                />\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor}/>\n                <div className='drawer primary'>\n                {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                    ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                    <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                    <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                    <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                    <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                </div>):null}\n                <b>Instructions:</b><br/>This is a pixel art canvas with infinite area. Scroll to zoom in and out, right click to pan around, and use left click to draw on the canvas.\n                <br/>Use the palette on the right to select your colour.\n                <div style={{color: `#909090`}}>(!!!!) Be aware that there is no saving yet lol, also this is just a prototype so limited colours, no drawing tools etc.</div>\n                <input type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getDebugMode = props.getDebugMode;\n        this.getColorSelected = props.getColorSelected;\n        this.changeUpdateTime = props.changeUpdateTime;\n        this.changeDrawTime = props.changeDrawTime;\n\n        this.changeCursorLoc = props.changeCursorLoc;\n        this.changeOffsetLoc = props.changeOffsetLoc;\n        this.changeChunkLoc = props.changeChunkLoc;\n\n        this.drawLines = [];\n\n        this.scale = 16;\n        this.tempscale = this.scale;\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n\n        this.canvas = null;\n    }\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n\n        // this.resizeCanvas(this.canvas);\n        const { width, height } = this.canvas.getBoundingClientRect();\n        this.map_grid = new Map(width, height);\n\n        setTimeout(this.updateCanvas(), 1000);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x,y);\n        // console.log(`cursor at (${x.toFixed(1)},${y.toFixed(1)})`);\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint) {\n        let start =  Date.now();\n\n        this.resizeCanvas(canvas);\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // finding location in terms of iterators of current cell\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, startpoint);\n\n        let blockid;\n        let x;\n        let y;\n\n        let mapoffset_x = Math.round(this.mapoffset.x);\n        let mapoffset_y = Math.round(this.mapoffset.y);\n        // let mapoffset_x = this.mapoffset.x;\n        // let mapoffset_y = this.mapoffset.y;\n\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k)+mapoffset_x)*(this.scale);\n            y = (((j+startpoint.y)*CHUNKSIZE+l)+mapoffset_y)*(this.scale);\n            if (x%1!==0||y%1!==0||this.scale%1!==0) console.log(\"ALERT:\", x, y, this.scale);\n            ctx.fillRect(x, y, this.scale, this.scale);\n            // console.log(x,y,cellapparentsize);\n        }\n        if (this.map_grid.data === null) return;\n        // for map\n\n\n        let chunkbufferoffset = 0;\n        let data = new Uint32Array(this.map_grid.data);\n\n        if (this.getDebugMode()) ctx.beginPath();\n        for (let i=0;i<this.map_grid.numchunks.x;i++) {\n            for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                // for each chunk\n                if (this.getDebugMode()) {\n                    x = (((i+startpoint.x)*CHUNKSIZE)+mapoffset_x)*(this.scale);\n                    y = (((j+startpoint.y)*CHUNKSIZE)+mapoffset_y)*(this.scale);\n\n                    ctx.fillStyle = \"#000000\";\n                    ctx.lineWidth = 0.01*Math.floor(this.scale);\n                    ctx.moveTo(x, 0);\n                    ctx.lineTo(x, this.canvas.height/2);\n                    // ctx.stroke();\n                    ctx.moveTo(0, y);\n                    ctx.lineTo(this.canvas.width/2, y);\n                }\n                for (let c=0;c<(CHUNKSIZE*CHUNKSIZE);c++) {\n                    let k = Math.floor(c/CHUNKSIZE);\n                    let l = c-(k*CHUNKSIZE);\n\n                    // if (typeof this.map_grid.matrix[i][j] === 'undefined') continue;\n\n                    blockid = data[chunkbufferoffset+c];\n                    // if (c%100===0) console.log(blockid);\n\n                    if (blockid!==16777215){\n                        // ctx.fillStyle = blockid.toString(16);\n                        ctx.fillStyle = \"#\" + (blockid & 0x00FFFFFF).toString(16).padStart(6, '0');\n                        // if (c===0) console.log((blockid & 0x00FFFFFF).toString(16).padStart(6, '0'))\n                        doFill(i,j,k,l,blockid);\n                    }\n                }\n                chunkbufferoffset += (CHUNKSIZE*CHUNKSIZE);\n            }\n        }\n        if (this.getDebugMode()) ctx.stroke();\n        // ctx.fillStyle = \"#\" + this.getColorSelected() + \"8f\"; // placeholder until get images\n        // console.log(this.getColorSelected());\n        // console.log((this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0'));\n        ctx.fillStyle = \"#\"+(this.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0')+\"ff\";\n        doFill(cell_i,cell_j,cell_k,cell_l);\n\n        this.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.mapoffset.multipliedby(this.scale), this.scale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend)\n        .then(()=>{\n            this.drawMap(this.canvas, startpoint);\n            this.startpoint = startpoint;\n            this.changeUpdateTime(Date.now()-start);\n        });\n\n        setTimeout(()=>{this.updateCanvas()}, 1000);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = Math.floor((1*width*ratio)/this.scale)*this.scale;\n          canvas.height = Math.floor((1*height*ratio)/this.scale)*this.scale;\n        //   console.log(canvas.width, canvas.height);\n          context.scale(ratio, ratio);\n          return true;\n        }\n    \n        return false\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n        let dataindex = cell_i*(this.map_grid.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+cell_j*(CHUNKSIZE*CHUNKSIZE)+cell_k*CHUNKSIZE+cell_l;\n        if (dataindex < this.map_grid.data.byteLength/4) this.map_grid.addCell(dataindex, this.getColorSelected());\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        // Drawing line and updating stats\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) this.drawLine(this.currentcell,newcurrentcell);\n            this.currentcell = newcurrentcell;\n            let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.changeCursorLoc(this.currentcell);\n            this.changeChunkLoc(cell_i+this.startpoint.x,cell_j+this.startpoint.y);\n            update = true;\n        }\n        return update;\n    }\n\n    drawLine(p1,p2) {\n        plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n        this.drawLines.push({p1:p1,p2:p2,offset:this.celloffset,blockid:this.getColorSelected()});\n    }\n\n    render() {\n        return (\n            <div>\n            <canvas \n                ref={this.canvasRef} \n                className='map-canvas primary'\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        this.lmousedown=true;\n                        this.drawLine(this.currentcell,this.currentcell);\n                        this.drawMap(this.canvas, this.startpoint);\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    if (this.moveCursor(e)) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    e.preventDefault();\n                    let newscale = this.tempscale - Math.round(e.deltaY)/1000;\n                    console.log(this.scale, this.tempscale);\n                    if (newscale>5) this.tempscale = newscale;\n                    else this.tempscale = 5;\n                    this.scale = Math.round(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas>\n            </div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.changeColor = props.changeColor;\n\n        this.handleChange = (e) => {\n            this.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    blocks.map(button => (\n                        <div \n                            key={button.blockid} \n                            style={{backgroundColor: `${button.imagesrc}`}} \n                            className={`blockbutton` + (this.props.isSelected(button.imagesrc) ? \"selected\" : \"\")}\n                            onClick={() => {this.changeColor(button.imagesrc)}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n                <input type={\"color\"} onChange={this.handleChange}></input>\n                {/* <input type={\"submit\"} value={\"Apply\"}></input> */}\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}