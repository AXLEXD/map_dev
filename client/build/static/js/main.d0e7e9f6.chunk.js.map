{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","DRAWTOOL","MOVETOOL","colors","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","plotLine","p1","p2","offset","Math","abs","colorTo32Uint","colorstring","parseInt","substring","colorToString","colornum","toString","padStart","Vector2D","_classCallCheck","_createClass","othervector","number","Map","data","image","dataview","imageview","numchunks","cellsize","canvas","scale","chunkpixels","startpoint","floor","_canvas$getBoundingCl","getBoundingClientRect","width","height","ceil","_setMatrix","_asyncToGenerator","_callee","dimn","start","lines","changeTranscodeTime","coords","map_grid","j","coordsobj","_context","fetch","headers","Accept","Content-Type","body","JSON","stringify","arrayBuffer","chunkbuffer","current","Date","now","Uint32Array","ArrayBuffer","byteLength","Uint32data","k","l","bmp_index","color","getDataIndex","finalcolor","a","b","relative_index","_x","_x2","_x3","_x4","_x5","apply","arguments","currentcell","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","tool_mode","debug_mode","show_stats","color_selected","stroke_radius","update","time","tot_time","num_updates","transcode","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","cxstart","cystart","cxend","cyend","strokecanvasRef","createRef","getColorSelected","getDebugMode","getToolMode","changeToolMode","change_to","setState","changeColor","drawStrokeCanvas","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","strokecanvas","size","ctx","getContext","clearRect","fillStyle","fillRect","filename","x2","y2","response","get","split","blob","pngblob","url","window","URL","createObjectURL","link","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","_this2","React","className","MapCanvas","toolmode","Palette","position","right","round","onClick","checked","onChange","defaultValue","e","target","mapDownload","src","alt","ref","Component","_React$Component2","_this3","drawLines","lastdraw","tempscale","cellpos","canvasRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","mousepos","replacecanvas","is_updating","drawcache","_this4","resizeCanvas","addEventListener","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","pos","end","transform","setTo","isupdate","_this5","doFill","mapoffset_x","mapoffset_y","imageData","ImageData","Uint8ClampedArray","rctx","putImageData","_canvas$getBoundingCl2","offset_x","offset_y","drawImage","beginPath","lineWidth","moveTo","lineTo","stroke","linearray","line","currentpos","_this5$map_grid$getCh","getChunkPosOffset","blockid","_this6","tempupdatescale","_this$map_grid$getVal","getValues","multipliedby","linestosend","setMatrix","canvasscale","drawMap","shift","_canvas$getBoundingCl3","_window$devicePixelRa","devicePixelRatio","ratio","scalex","scaley","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","drawobj","_this8","cursor","getCursor","onContextMenu","preventDefault","onMouseDown","button","console","log","_this8$map_grid$getCh","dataindex","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","oldtempscale","scalenum","_React$Component3","_this9","handleChange","_this10","map","index","backgroundColor","concat","border","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d0e7e9f6.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef, useRef } from 'react';\n\n\nconst UPDATEPERIOD = 1000;\n\nconst CHUNKSIZE = 16;\n\nconst LOWESTSCALE = 3;\n\nconst DRAWTOOL = 0;\nconst EYEDROPTOOL = 1;\nconst MOVETOOL = 2;\n  \n// const blocks = [\n//     {\n//         blockid: '0',\n//         blockname: '1',\n//         imagesrc: '#ffffff'\n//     },\n//     {\n//         blockid: '1',\n//         blockname: '2',\n//         imagesrc: '#d1e7dc'\n//     },\n//     {\n//         blockid: '2',\n//         blockname: '3',\n//         imagesrc: '#c4d4e1'\n//     },\n//     {\n//         blockid: '3',\n//         blockname: '4',\n//         imagesrc: '#bcb5d3'\n//     },\n//     {\n//         blockid: '4',\n//         blockname: '5',\n//         imagesrc: '#f5dbe2'\n//     },\n//     {\n//         blockid: '5',\n//         blockname: '6',\n//         imagesrc: '#eeb6c9'\n//     },\n//     {\n//         blockid: '6',\n//         blockname: '7',\n//         imagesrc: '#c49abf'\n//     },\n//     {\n//         blockid: '7',\n//         blockname: '8',\n//         imagesrc: '#bada55'\n//     },\n//     {\n//         blockid: '8',\n//         blockname: '9',\n//         imagesrc: '#ffd700'\n//     },\n//     {\n//         blockid: '9',\n//         blockname: '10',\n//         imagesrc: '#f47b79'\n//     },\n//     {\n//         blockid: 'a',\n//         blockname: '11',\n//         imagesrc: '#c6e2d4'\n//     },\n//     {\n//         blockid: 'b',\n//         blockname: '12',\n//         imagesrc: '#b6d3c2'\n//     },\n//     {\n//         blockid: 'c',\n//         blockname: '13',\n//         imagesrc: '#e0b1cb'\n//     },\n//     {\n//         blockid: 'd',\n//         blockname: '14',\n//         imagesrc: '#d0a7b7'\n//     },\n//     {\n//         blockid: 'e',\n//         blockname: '15',\n//         imagesrc: '#f3d1d3'\n//     },\n//     {\n//         blockid: 'f',\n//         blockname: '16',\n//         imagesrc: '#e9b8c8'\n//     }\n// ];\n\nconst colors = [\n    \"#000000\", // Black\n    \"#FFFFFF\", // White\n    \"#FF0000\", // Red\n    \"#00FF00\", // Green\n    \"#0000FF\", // Blue\n    \"#FFFF00\", // Yellow\n    \"#FF00FF\", // Magenta\n    \"#00FFFF\", // Cyan\n    \"#800000\", // Maroon\n    \"#008000\", // Olive\n    \"#000080\", // Navy\n    \"#808000\", // Olive Drab\n    \"#800080\", // Purple\n    \"#008080\", // Teal\n    \"#808080\", // Gray\n    \"#C0C0C0\", // Silver\n    \"#FFC0CB\", // Pink\n    \"#FFA07A\", // Light Salmon\n    \"#FF7F50\", // Coral\n    \"#FF6347\", // Tomato\n    \"#FF4500\", // Orange Red\n    \"#FF8C00\", // Dark Orange\n    \"#FFD700\", // Gold\n    \"#FFFFE0\", // Light Yellow\n    \"#EEE8AA\", // Pale Goldenrod\n    \"#ADFF2F\", // Green Yellow\n    \"#32CD32\", // Lime Green\n    \"#00FA9A\", // Medium Spring Green\n    \"#00CED1\", // Dark Turquoise\n    \"#6A5ACD\", // Slate Blue\n    \"#7B68EE\", // Medium Slate Blue\n    \"#FF69B4\", // Hot Pink\n    \"#8B4513\" // Saddle Brown\n  ];\n  \n\n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nfunction colorTo32Uint(colorstring) {\n    return parseInt(colorstring.substring(1), 16);\n}\nfunction colorToString(colornum) {\n    return \"#\" + (colornum & 0x00FFFFFF).toString(16).padStart(6, '0');\n}\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor() {\n        // this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        //the data returned by the server\n        this.data = null;\n        //the data formatted as an image bitmap\n        this.image = null;\n\n        this.dataview = null;\n        this.imageview = null;\n\n        this.numchunks = null;\n        this.cellsize = 2;\n    }\n\n    getValues(canvas, offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        const { width, height } = canvas.getBoundingClientRect();\n\n        numchunks.x = Math.ceil(width/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(height/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    async setMatrix(dimn, start, lines, cellsize, changeTranscodeTime) {\n\n        let coords = [];\n        let map_grid = this;\n\n        for (let i=0;i<dimn.x;i++) {\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                \n                map_grid.numchunks = dimn;\n                let current = Date.now();\n\n                // const cellsize = 10;\n                map_grid.data = chunkbuffer;\n                map_grid.dataview = new Uint32Array(map_grid.data);\n\n                map_grid.image = new ArrayBuffer(chunkbuffer.byteLength*cellsize*cellsize);\n                map_grid.imageview = new Uint32Array(map_grid.image);\n\n                let Uint32data = new Uint32Array(chunkbuffer);\n                \n                for (let i=0;i<map_grid.numchunks.x;i++) {\n                    for (let j=0;j<map_grid.numchunks.y;j++) {\n                        for (let k=0;k<CHUNKSIZE;k++) {\n                            for (let l=0;l<CHUNKSIZE;l++) {\n                                let bmp_index = i*CHUNKSIZE*cellsize + j*map_grid.numchunks.x*(CHUNKSIZE*CHUNKSIZE)*cellsize*cellsize + k*cellsize + l*map_grid.numchunks.x*CHUNKSIZE*cellsize*cellsize;\n                                let alex_index = map_grid.getDataIndex(i,j,k,l);\n                                let color = Uint32data[alex_index];\n                                let finalcolor = ((color << 16)&0x00FF0000) | ((color)&0xFF00FF00) | ((color>>16)&0x000000FF);\n\n                                for (let a=0;a<cellsize;a++) {\n                                    for (let b=0;b<cellsize;b++) {\n                                        let relative_index = bmp_index + a + b*map_grid.numchunks.x*CHUNKSIZE*cellsize;\n                                        map_grid.imageview[relative_index] = finalcolor;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                map_grid.cellsize = cellsize;\n                changeTranscodeTime(Date.now()-current);\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const k = currentcell.x - (i+startpoint.x)*CHUNKSIZE;\n\n        const j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const l = currentcell.y - (j+startpoint.y)*CHUNKSIZE;\n\n\n        return {i, j, k, l};\n    }\n    getDataIndex(i,j,k,l) {\n        return i*(this.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+j*(CHUNKSIZE*CHUNKSIZE)+k*CHUNKSIZE+l;\n    }\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tool_mode: MOVETOOL,\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 1672153, \n            stroke_radius:1,\n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            transcode: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0,\n\n            cxstart:0,\n            cystart:0,\n            cxend:0,\n            cyend:0\n        };\n\n        this.strokecanvasRef = createRef();\n\n        this.getColorSelected = () => {return this.state.color_selected};\n        this.getDebugMode = () => {return this.state.debug_mode};\n        this.getToolMode = () => {return this.state.tool_mode};\n\n        this.changeToolMode = (change_to) => {\n            this.setState({tool_mode: change_to});\n        }\n\n        this.changeColor = (color) => {\n            if (typeof color === 'number') {\n                this.setState({color_selected: color});\n            } else throw \"penis\";\n            this.changeToolMode(DRAWTOOL);\n            this.drawStrokeCanvas(color);\n        };\n        this.isSelected = (color) => {\n            if (typeof color === 'string') {\n                let out_num = colorTo32Uint(color);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof color === 'number') {\n                return (color===this.state.color_selected);\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeTranscodeTime = (new_time) => {\n            this.setState({transcode:{\n                time: new_time, \n                tot_time: this.state.transcode.tot_time+new_time, \n                num_updates: this.state.transcode.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n        this.strokecanvas = this.strokecanvasRef.current;\n        this.drawStrokeCanvas();\n    }\n\n    drawStrokeCanvas(color) {\n        const cellsize = 50;\n        const size = (this.state.stroke_radius+2)*cellsize;\n        this.strokecanvas.width = size;\n        this.strokecanvas.height = size;\n\n        const ctx = this.strokecanvas.getContext('2d');\n        ctx.clearRect(0,0,this.strokecanvas.width,this.strokecanvas.height);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0,0,this.strokecanvas.width,this.strokecanvas.height);\n\n        ctx.fillStyle = colorToString(color);\n        ctx.fillRect(cellsize, cellsize, cellsize,cellsize);\n    }\n\n    mapDownload() {\n        let filename;\n        let coordsobj = {x1:this.state.cxstart,y1:this.state.cystart,x2:this.state.cxend,y2:this.state.cyend};\n        if (coordsobj.x1===coordsobj.x2 || coordsobj.y1===coordsobj.y2 || coordsobj.x1>coordsobj.x2 || coordsobj.y1>coordsobj.y2) return;\n\n        fetch('/getimage',{\n            method: 'POST',\n            headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n            body: JSON.stringify(coordsobj)\n        }).then((response) => {\n            filename = response.headers.get('Content-Disposition').split('\"')[1];\n            return response.blob()\n        })\n        .then((pngblob) => {\n            const url = window.URL.createObjectURL(pngblob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download',filename);\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n        });\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas \n                    toolmode={this.state.tool_mode}\n                    getToolMode={this.getToolMode}\n                    changeToolMode={this.changeToolMode}\n                    getDebugMode={this.getDebugMode}\n                    changeUpdateTime={this.changeUpdateTime}\n                    changeTranscodeTime={this.changeTranscodeTime}\n                    changeDrawTime={this.changeDrawTime}\n                    getColorSelected={this.getColorSelected}\n                    changeCursorLoc={this.changeCursorLoc}\n                    changeOffsetLoc={this.changeOffsetLoc}\n                    changeChunkLoc={this.changeChunkLoc}\n                    changeColor={this.changeColor}\n                />\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor} color={this.state.color_selected}/>\n                <div className='drawer primary'>\n                    {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                        ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                        <br/>({this.state.transcode.time}ms, avg: {Math.round(this.state.transcode.tot_time/this.state.transcode.num_updates)}ms, {this.state.transcode.num_updates} transcodes);\n                        <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                        <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                        <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                        <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                    </div>):null}\n\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(DRAWTOOL)}}\n                    >draw</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(EYEDROPTOOL)}}\n                    >eyedrop</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(MOVETOOL)}}\n                    >move</div>\n                    \n\n                    <input checked={this.state.debug_mode} type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                    <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                    <table\n                        className={`download-wrapper`}\n                        // onClick={() => this.fileDownload()}\n                    ><tbody>\n                        <tr>\n                            <td>\n                                <p>from:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxstart:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cystart:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p>to:&nbsp;</p><input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cxend:parseInt(e.target.value)})}></input>\n                                <input defaultValue={\"0\"} type={\"number\"} style={{width:\"35px\"}} onChange={(e)=>this.setState({cyend:parseInt(e.target.value)})}></input>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <p >Save PNG:</p>\n                                <div className={`download-button`} onClick={() => this.mapDownload()}><img src='save.png' alt='save'/></div>\n                            </td>\n                        </tr>\n                    </tbody></table>\n                    <canvas ref={this.strokecanvasRef} style={{width:\"10vmin\",height:\"10vmin\"}}></canvas>\n                    {/* <div style={{width:\"100px\", height:\"100px\", backgroundColor:colorToString(this.state.color_selected)}}></div> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.drawLines = [];\n\n        this.lastdraw = 0;\n\n        this.scale = 4;\n        this.tempscale = this.scale;\n\n        this.cellpos = {i:0,j:0,k:0,l:0};\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n        this.mousepos = new Vector2D(0,0);\n\n        this.canvas = null;\n        this.replacecanvas = null;\n\n        this.is_updating = false;\n        this.drawcache = [];\n    }\n\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n        this.replacecanvas = document.createElement('canvas');\n        this.map_grid = new Map();\n        this.resizeCanvas(this.canvas);\n        window.addEventListener('resize', ()=>this.resizeCanvas(this.canvas));\n        setTimeout(this.updateCanvas(), UPDATEPERIOD);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x/(this.tempscale/this.scale),y/(this.tempscale/this.scale));\n        this.mousepos = pos;\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.props.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint, isupdate) {\n        let start =  Date.now();\n        if (this.map_grid.image===null || this.map_grid.numchunks===null) return;\n        const cellsize = this.map_grid.cellsize;\n\n        let x,y;\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k))*(cellsize)+mapoffset_x;\n            y = (((j+startpoint.y)*CHUNKSIZE+l))*(cellsize)+mapoffset_y;\n            ctx.fillRect(x, y, cellsize, cellsize);\n            // console.log(x,y,cellapparentsize);\n        }\n\n        let length = this.map_grid.numchunks.x*CHUNKSIZE*cellsize;\n        if ((this.map_grid.image.byteLength*4)%length!==0) return;\n        let imageData = new ImageData(new Uint8ClampedArray(this.map_grid.image), length);\n\n        const ctx = canvas.getContext(\"2d\");\n\n        const rctx = this.replacecanvas.getContext(\"2d\");\n        rctx.clearRect(0,0,this.replacecanvas.width, this.replacecanvas.height);\n        rctx.putImageData(imageData, 0, 0);\n\n        const { width, height } = canvas.getBoundingClientRect();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        let mapoffset_x = Math.floor(this.mapoffset.x*cellsize);\n        let mapoffset_y = Math.floor(this.mapoffset.y*cellsize);\n        let offset_x = startpoint.x*CHUNKSIZE*cellsize+mapoffset_x;\n        let offset_y = startpoint.y*CHUNKSIZE*cellsize+mapoffset_y;\n\n        {\n            ctx.drawImage(this.replacecanvas, offset_x, offset_y);\n            \n            if (this.props.getDebugMode()) {\n                ctx.beginPath();\n                for (let i=0;i<this.map_grid.numchunks.x;i++) {\n                    for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                        x = (((i+startpoint.x)*CHUNKSIZE))*cellsize+mapoffset_x;\n                        y = (((j+startpoint.y)*CHUNKSIZE))*cellsize+mapoffset_y;\n    \n                        ctx.fillStyle = \"#000000\";\n                        ctx.lineWidth = 0.01*Math.floor(this.scale);\n                        ctx.moveTo(x, 0);\n                        ctx.lineTo(x, height);\n                        // ctx.stroke();\n                        ctx.moveTo(0, y);\n                        ctx.lineTo(width, y);\n                    }\n                }\n                ctx.stroke();\n            }\n\n            this.drawcache.forEach((linearray)=>{\n                linearray.forEach((line)=>{\n                    plotLine(line.p1, line.p2, line.offset, (x,y)=>{\n                        const currentpos = new Vector2D(x-line.offset.x,y-line.offset.y);\n                        const {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n                        ctx.fillStyle = colorToString(line.blockid);\n                        doFill(i, j, k, l);\n                    });\n                })\n            });\n\n            if (this.props.toolmode===DRAWTOOL) {\n                // doFill(this.cellpos);\n                ctx.fillStyle = colorToString(this.props.getColorSelected())+\"ff\";\n                doFill(this.cellpos.i, this.cellpos.j, this.cellpos.k, this.cellpos.l);\n            }\n        };\n\n        this.props.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let tempupdatescale = Math.floor(this.tempscale);\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.canvas, this.mapoffset.multipliedby(tempupdatescale), tempupdatescale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.is_updating = true;\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend, tempupdatescale, this.props.changeTranscodeTime)\n        .then(()=>{\n            \n\n            this.replacecanvas.width = tempupdatescale*numchunks.x*CHUNKSIZE;\n            this.replacecanvas.height = tempupdatescale*numchunks.y*CHUNKSIZE;    \n\n            // this.canvas.getContext('2d').resetTransform();\n            this.resizeCanvas(this.canvas);\n            this.canvasscale(this.canvas, this.tempscale/tempupdatescale, this.tempscale/tempupdatescale)\n            this.scale = Math.floor(this.tempscale)\n            this.startpoint = startpoint;\n            this.drawMap(this.canvas, startpoint, true);\n\n            this.props.changeUpdateTime(Date.now()-start);\n            this.is_updating = false;\n        }).then(()=>{\n            // this.drawcache.forEach((draw) => {draw()});\n            this.drawcache.push([]);\n            if (this.drawcache.length>4) {\n                this.drawcache.shift();\n            }\n            \n        });\n\n        setTimeout(()=>{this.updateCanvas()}, UPDATEPERIOD);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = (1*width*ratio);\n          canvas.height = (1*height*ratio);\n          context.scale(ratio, ratio);\n        //   canvas.style.width = `${width}px`;\n        //   canvas.style.height = `${height}px`;\n          return true;\n        }\n    \n        return false\n    }\n\n    canvasscale(canvas, scalex, scaley) {\n        // let mousepos = this.mousepos;\n        const ctx = canvas.getContext('2d');\n        // const transx = mousepos.x;\n        // const transy = mousepos.y;\n        // ctx.translate(transx, transy);\n        ctx.scale(scalex, scaley);\n        // ctx.translate(-transx, -transy);\n    }\n\n    // drawCellAtMouse(x,y) {\n    //     const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n    //     let {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n    //     let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n    //     if (dataindex < this.map_grid.image.byteLength/4) this.map_grid.addCell(dataindex, this.props.getColorSelected());\n    // }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        // Drawing line and updating stats\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) this.drawLine(this.currentcell,newcurrentcell);\n            this.currentcell = newcurrentcell;\n            this.cellpos = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.props.changeCursorLoc(this.currentcell);\n            this.props.changeChunkLoc(this.cellpos.i+this.startpoint.x,this.cellpos.j+this.startpoint.y);\n            update = true;\n        }\n        return update;\n    }\n\n    drawLine(p1,p2) {\n        // let thisdraw = ()=>{plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y))};\n        let thisdraw = ()=>{\n            let pixels = [];\n            plotLine(p1, p2, this.celloffset, (x,y)=>{pixels.push({x:x,y:y, blockid:this.props.getColorSelected()})});\n            return pixels;\n        };\n        // this.drawcache.push(thisdraw());\n        // thisdraw();\n        // if (this.is_updating) {this.drawcache.push(thisdraw)};\n        let drawobj = {p1:p1,p2:p2,offset:this.celloffset,blockid:this.props.getColorSelected()};\n        this.drawcache[this.drawcache.length-1].push(drawobj);\n        this.drawLines.push(drawobj);\n    }\n\n    render() {\n        let getCursor = ()=>{\n            switch (this.props.toolmode) {\n                case EYEDROPTOOL:\n                    return \"crosshair\";\n                case MOVETOOL:\n                    return \"move\";\n                default:\n                    return \"default\";\n            }\n        }\n        return (<div>\n            {/* <canvas ref={this.canvasRef2} style={{visibility:\"hidden\"}}></canvas> */}\n            <canvas \n                ref={this.canvasRef}\n                className='map-canvas primary'\n                style={{cursor:getCursor()}}\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        switch (this.props.toolmode) {\n                            case EYEDROPTOOL:\n                                console.log(\"eyedroptool used\");\n                                let {i,j,k,l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n                                let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n                                this.props.changeColor(this.map_grid.dataview[dataindex]);\n                                // this.props.changeToolMode(DRAWTOOL);\n                                break;\n                            case MOVETOOL:\n                                this.rmousedown=true;\n                                break;\n                            default:\n                                this.lmousedown=true;\n                                this.drawLine(this.currentcell,this.currentcell);\n                                this.drawMap(this.canvas, this.startpoint);\n                                break;\n                        }\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    if (this.moveCursor(e)) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    let newscale = this.tempscale - Math.floor(e.deltaY)/1000;\n                    // console.log(this.scale, this.tempscale);\n                    let oldtempscale = this.tempscale;\n                    if (newscale>LOWESTSCALE) this.tempscale = newscale;\n                    else this.tempscale = LOWESTSCALE;\n                    let oldscale = this.scale;\n                    console.log(this.tempscale);\n                    const scalenum = this.tempscale/oldtempscale;\n                    this.canvasscale(this.canvas, scalenum, scalenum);\n                    // this.scale = Math.floor(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas></div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = (e) => {\n            this.props.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    colors.map((color,index) => (\n                        <div \n                            key={index} \n                            style={{backgroundColor: `${color}`}} \n                            className={`blockbutton` + (this.props.isSelected(color) ? \"selected\" : \"\")}\n                            onClick={() => {this.props.changeColor(colorTo32Uint(color))}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n                <input style={{width:\"100px\", border:\"none\"}}value={this.props.color} type={\"color\"} onChange={this.handleChange} ></input>\n                {/* <input type={\"submit\"} value={\"Apply\"}></input> */}\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}