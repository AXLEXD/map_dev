{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DRAWTOOL","MOVETOOL","blocks","blockid","blockname","imagesrc","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","Vector2D","_classCallCheck","this","_createClass","key","value","othervector","number","Map","data","dataview","numchunks","canvas","offset","scale","chunkpixels","startpoint","Math","floor","_canvas$getBoundingCl","getBoundingClientRect","width","height","ceil","dimn","start","lines","coords","map_grid","i","j","coordsobj","push","Promise","resolve","reject","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","arrayBuffer","chunkbuffer","Uint32Array","currentcell","k","l","index","colorhex","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","call","state","tool_mode","debug_mode","show_stats","color_selected","update","time","tot_time","num_updates","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","getColorSelected","getDebugMode","getToolMode","changeToolMode","change_to","setState","changeColor","out_num","parseInt","substring","console","log","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","_this2","React","createElement","className","MapCanvas","toolmode","Palette","position","right","round","onClick","checked","type","onChange","Component","_React$Component2","_this3","drawLines","tempscale","cellpos","canvasRef","createRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","current","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","end","transform","setTo","_this4","Date","now","resizeCanvas","_canvas$getBoundingCl2","ctx","getContext","clearRect","fillStyle","fillRect","mapoffset_x","mapoffset_y","doFill","chunkbufferoffset","beginPath","lineWidth","moveTo","lineTo","c","CHUNKSIZE","toString","padStart","stroke","_this5","_this$map_grid$getVal","getValues","multipliedby","linestosend","setMatrix","drawMap","_canvas$getBoundingCl3","_window$devicePixelRa","window","devicePixelRatio","ratio","context","currentpos","_this$map_grid$getChu","getChunkPosOffset","dataindex","getDataIndex","byteLength","addCell","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","p1","p2","_this6","abs","plotLine","drawCellAtMouse","_this7","ref","cursor","getCursor","onContextMenu","e","preventDefault","onMouseDown","button","_this7$map_grid$getCh","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","_React$Component3","_this8","handleChange","target","_this9","map","backgroundColor","concat","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d812245c.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst CHUNKSIZE = 16;\n\nconst LOWESTSCALE = 3;\n\nconst DRAWTOOL = 0;\nconst EYEDROPTOOL = 1;\nconst MOVETOOL = 2;\n  \nconst blocks = [\n    {\n        blockid: '0',\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: '1',\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: '2',\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: '3',\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: '4',\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: '5',\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: '6',\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: '7',\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: '8',\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: '9',\n        blockname: '10',\n        imagesrc: '#f47b79'\n    },\n    {\n        blockid: 'a',\n        blockname: '11',\n        imagesrc: '#c6e2d4'\n    },\n    {\n        blockid: 'b',\n        blockname: '12',\n        imagesrc: '#b6d3c2'\n    },\n    {\n        blockid: 'c',\n        blockname: '13',\n        imagesrc: '#e0b1cb'\n    },\n    {\n        blockid: 'd',\n        blockname: '14',\n        imagesrc: '#d0a7b7'\n    },\n    {\n        blockid: 'e',\n        blockname: '15',\n        imagesrc: '#f3d1d3'\n    },\n    {\n        blockid: 'f',\n        blockname: '16',\n        imagesrc: '#e9b8c8'\n    }\n];\n\n  \n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor() {\n        // this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.data = null;\n        this.dataview = null;\n        this.numchunks = null;\n    }\n\n    getValues(canvas, offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        const { width, height } = canvas.getBoundingClientRect();\n\n        numchunks.x = Math.ceil(width/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(height/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    setMatrix(dimn, start, lines) {\n\n        let coords = [];\n        let map_grid = this;\n\n        for (let i=0;i<dimn.x;i++) {\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                // console.log([...new Uint8Array(chunkbuffer)].map(x => x.toString(16).padStart(2, '0')));\n                map_grid.data = chunkbuffer;\n                map_grid.dataview = new Uint32Array(map_grid.data);\n                map_grid.numchunks = dimn;\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const k = currentcell.x - (i+startpoint.x)*CHUNKSIZE;\n\n        const j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const l = currentcell.y - (j+startpoint.y)*CHUNKSIZE;\n\n\n        return {i, j, k, l};\n    }\n\n    addCell(index,colorhex) {\n        this.dataview[index] = colorhex;\n        // console.log(data[index], colorhex);\n    }\n    getDataIndex(i,j,k,l) {\n        return i*(this.numchunks.y)*(CHUNKSIZE*CHUNKSIZE)+j*(CHUNKSIZE*CHUNKSIZE)+k*CHUNKSIZE+l;\n    }\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tool_mode: MOVETOOL,\n            debug_mode: false,\n            show_stats: true,\n            color_selected: 1672153, \n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0,\n        };\n\n        this.getColorSelected = () => {return this.state.color_selected};\n        this.getDebugMode = () => {return this.state.debug_mode};\n        this.getToolMode = () => {return this.state.tool_mode};\n\n        this.changeToolMode = (change_to) => {\n            this.setState({tool_mode: change_to});\n        }\n\n        this.changeColor = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                console.log(blockid.substring(1));\n                console.log(out_num);\n                this.setState({color_selected: out_num});\n            }\n            else if (typeof blockid === 'number') {\n                this.setState({color_selected: blockid});\n            }\n            this.changeToolMode(DRAWTOOL);\n        };\n        this.isSelected = (blockid) => {\n            if (typeof blockid === 'string') {\n                let out_num = parseInt(blockid.substring(1), 16);\n                return (out_num===this.state.color_selected);\n            }\n            else if (typeof blockid === 'number') {\n                return (blockid===this.state.color_selected)\n            }\n        };\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas \n                    toolmode={this.state.tool_mode}\n                    getToolMode={this.getToolMode}\n                    changeToolMode={this.changeToolMode}\n                    getDebugMode={this.getDebugMode}\n                    changeUpdateTime={this.changeUpdateTime}\n                    changeDrawTime={this.changeDrawTime}\n                    getColorSelected={this.getColorSelected}\n                    changeCursorLoc={this.changeCursorLoc}\n                    changeOffsetLoc={this.changeOffsetLoc}\n                    changeChunkLoc={this.changeChunkLoc}\n                    changeColor={this.changeColor}\n                />\n                <Palette isSelected={this.isSelected} changeColor={this.changeColor}/>\n                <div className='drawer primary'>\n                    {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                        ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                        <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                        <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                        <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                        <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                    </div>):null}\n\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===DRAWTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(DRAWTOOL)}}\n                    >draw</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===EYEDROPTOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(EYEDROPTOOL)}}\n                    >eyedrop</div>\n                    <div\n                        className={`toolbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")+ ` blockbutton` + (this.getToolMode()===MOVETOOL ? \"selected\" : \"\")}\n                        onClick={() => {this.changeToolMode(MOVETOOL)}}\n                    >move</div>\n\n                    <input checked={this.state.debug_mode} type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                    <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.drawLines = [];\n\n        this.scale = 16;\n        this.tempscale = this.scale;\n\n        this.cellpos = {i:0,j:0,k:0,l:0};\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n\n        this.canvas = null;\n    }\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n        this.map_grid = new Map();\n        setTimeout(this.updateCanvas(), 1000);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.props.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint) {\n        let start =  Date.now();\n\n        this.resizeCanvas(canvas);\n        const { width, height } = canvas.getBoundingClientRect();\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, width, height)\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, width, height);\n\n        // finding location in terms of iterators of current cell\n        // let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, startpoint);\n\n        let blockid;\n        let x;\n        let y;\n\n        let mapoffset_x = Math.floor(this.mapoffset.x*this.scale);\n        let mapoffset_y = Math.floor(this.mapoffset.y*this.scale);\n        // let mapoffset_x = this.mapoffset.x;\n        // let mapoffset_y = this.mapoffset.y;\n\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k))*(this.scale)+mapoffset_x;\n            y = (((j+startpoint.y)*CHUNKSIZE+l))*(this.scale)+mapoffset_y;\n            if (x%1!==0||y%1!==0||this.scale%1!==0) console.log(\"ALERT:\", x, y, this.scale);\n            ctx.fillRect(x, y, this.scale, this.scale);\n            // console.log(x,y,cellapparentsize);\n        }\n        if (this.map_grid.data === null) return;\n        // for map\n\n\n        let chunkbufferoffset = 0;\n\n        if (this.props.getDebugMode()) ctx.beginPath();\n        for (let i=0;i<this.map_grid.numchunks.x;i++) {\n            for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                // for each chunk\n                if (this.props.getDebugMode()) {\n                    x = (((i+startpoint.x)*CHUNKSIZE))*(this.scale)+mapoffset_x;\n                    y = (((j+startpoint.y)*CHUNKSIZE))*(this.scale)+mapoffset_y;\n\n                    ctx.fillStyle = \"#000000\";\n                    ctx.lineWidth = 0.01*Math.floor(this.scale);\n                    ctx.moveTo(x, 0);\n                    ctx.lineTo(x, height);\n                    // ctx.stroke();\n                    ctx.moveTo(0, y);\n                    ctx.lineTo(width, y);\n                }\n                for (let c=0;c<(CHUNKSIZE*CHUNKSIZE);c++) {\n                    let k = Math.floor(c/CHUNKSIZE);\n                    let l = c-(k*CHUNKSIZE);\n                    \n                    blockid = this.map_grid.dataview[chunkbufferoffset+c];\n\n                    if (blockid!==16777215){\n                        // ctx.fillStyle = blockid.toString(16);\n                        ctx.fillStyle = \"#\" + (blockid & 0x00FFFFFF).toString(16).padStart(6, '0');\n                        // if (c===0) console.log((blockid & 0x00FFFFFF).toString(16).padStart(6, '0'))\n                        doFill(i,j,k,l,blockid);\n                    }\n                }\n                chunkbufferoffset += (CHUNKSIZE*CHUNKSIZE);\n            }\n        }\n        if (this.props.getDebugMode()) ctx.stroke();\n\n        if (this.props.toolmode===DRAWTOOL) {\n            ctx.fillStyle = \"#\"+(this.props.getColorSelected() & 0x00FFFFFF).toString(16).padStart(6, '0')+\"ff\";\n            doFill(this.cellpos.i,this.cellpos.j,this.cellpos.k,this.cellpos.l);\n        }\n        this.props.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.canvas, this.mapoffset.multipliedby(this.scale), this.scale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend)\n        .then(()=>{\n            this.drawMap(this.canvas, startpoint);\n            this.startpoint = startpoint;\n            this.props.changeUpdateTime(Date.now()-start);\n        });\n\n        setTimeout(()=>{this.updateCanvas()}, 1000);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = (1*width*ratio);\n          canvas.height = (1*height*ratio);\n          context.scale(ratio, ratio);\n          return true;\n        }\n    \n        return false\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {i, j, k, l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n        let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n        if (dataindex < this.map_grid.data.byteLength/4) this.map_grid.addCell(dataindex, this.props.getColorSelected());\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        // Drawing line and updating stats\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) this.drawLine(this.currentcell,newcurrentcell);\n            this.currentcell = newcurrentcell;\n            this.cellpos = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.props.changeCursorLoc(this.currentcell);\n            this.props.changeChunkLoc(this.cellpos.i+this.startpoint.x,this.cellpos.j+this.startpoint.y);\n            update = true;\n        }\n        return update;\n    }\n\n    drawLine(p1,p2) {\n        plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n        this.drawLines.push({p1:p1,p2:p2,offset:this.celloffset,blockid:this.props.getColorSelected()});\n    }\n\n    render() {\n        let getCursor = ()=>{\n            switch (this.props.toolmode) {\n                case EYEDROPTOOL:\n                    return \"crosshair\";\n                case MOVETOOL:\n                    return \"move\";\n                default:\n                    return \"default\";\n            }\n        }\n        return (\n            <canvas \n                ref={this.canvasRef}\n                className='map-canvas primary'\n                style={{cursor:getCursor()}}\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        switch (this.props.toolmode) {\n                            case EYEDROPTOOL:\n                                console.log(\"eyedroptool used\");\n                                let {i,j,k,l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n                                let dataindex = this.map_grid.getDataIndex(i,j,k,l);\n                                this.props.changeColor(this.map_grid.dataview[dataindex]);\n                                // this.props.changeToolMode(DRAWTOOL);\n                                break;\n                            case MOVETOOL:\n                                this.rmousedown=true;\n                                break;\n                            default:\n                                this.lmousedown=true;\n                                this.drawLine(this.currentcell,this.currentcell);\n                                this.drawMap(this.canvas, this.startpoint);\n                                break;\n                        }\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    if (this.moveCursor(e)) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    let newscale = this.tempscale - Math.floor(e.deltaY)/1000;\n                    // console.log(this.scale, this.tempscale);\n                    if (newscale>LOWESTSCALE) this.tempscale = newscale;\n                    else this.tempscale = LOWESTSCALE;\n                    this.scale = Math.floor(this.tempscale);\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = (e) => {\n            this.props.changeColor(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    blocks.map(button => (\n                        <div \n                            key={button.blockid} \n                            style={{backgroundColor: `${button.imagesrc}`}} \n                            className={`blockbutton` + (this.props.isSelected(button.imagesrc) ? \"selected\" : \"\")}\n                            onClick={() => {this.props.changeColor(button.imagesrc)}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n                <input type={\"color\"} onChange={this.handleChange}></input>\n                {/* <input type={\"submit\"} value={\"Apply\"}></input> */}\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}