{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CHUNKSIZE","blocks","blockid","blockname","imagesrc","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","Vector2D","_classCallCheck","this","_createClass","key","value","othervector","number","Map","w","h","canvasdimensions","matrix","data","lastchunkrequesttime","numchunks","offset","scale","chunkpixels","startpoint","Math","floor","ceil","dimn","start","lines","coords","grid","Array","i","j","coordsobj","push","map_grid","Promise","resolve","reject","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","arrayBuffer","chunkbuffer","currentcell","cell_i","cell_k","cell_j","cell_l","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","call","state","debug_mode","show_stats","block_selected","update","time","tot_time","num_updates","draw","cursorx","cursory","offsetx","offsety","chunkx","chunky","changeBlock","setState","getBlockSelected","getDebugMode","isSelected","changeUpdateTime","new_time","changeDrawTime","changeCursorLoc","vector","changeOffsetLoc","changeChunkLoc","_inherits","document","style","overflow","buffer","ArrayBuffer","int32View","Int32Array","length","res","json","message","_this2","React","createElement","className","MapCanvas","Palette","position","right","round","color","type","onChange","checked","Component","_React$Component2","_this3","drawLines","canvasRef","createRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","canvas","current","_this$canvas$getBound","getBoundingClientRect","width","height","setTimeout","updateCanvas","event","rect","clientX","left","clientY","top","end","transform","setTo","_this4","Date","now","resizeCanvas","ctx","getContext","clearRect","fillStyle","fillRect","_this$map_grid$getChu","getChunkPosOffset","doFill","k","l","chunkbufferoffset","Uint32Array","beginPath","lineWidth","moveTo","lineTo","c","toString","padStart","stroke","_this5","_this$map_grid$getVal","getValues","multipliedby","linestosend","setMatrix","drawMap","_canvas$getBoundingCl","_window$devicePixelRa","window","devicePixelRatio","ratio","context","currentpos","_this$map_grid$getChu2","undefined","addCell","parseInt","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","_this$map_grid$getChu3","p1","p2","_this6","abs","plotLine","drawCellAtMouse","_this7","ref","onContextMenu","e","preventDefault","onMouseDown","button","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","_React$Component3","_this8","_this9","map","backgroundColor","concat","onClick","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b04f3aed.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst CHUNKSIZE = 16;\n\nconst blocksold = [\n    {\n        blockid: 0,\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: 1,\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: 2,\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: 3,\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: 4,\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: 5,\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: 6,\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: 7,\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: 8,\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: 9,\n        blockname: '10',\n        imagesrc: '#f47b79'\n    }\n];\n  \nconst blocks = [\n    {\n        blockid: '0',\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: '1',\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: '2',\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: '3',\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: '4',\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: '5',\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: '6',\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: '7',\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: '8',\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: '9',\n        blockname: '10',\n        imagesrc: '#f47b79'\n    },\n    {\n        blockid: 'a',\n        blockname: '11',\n        imagesrc: '#c6e2d4'\n    },\n    {\n        blockid: 'b',\n        blockname: '12',\n        imagesrc: '#b6d3c2'\n    },\n    {\n        blockid: 'c',\n        blockname: '13',\n        imagesrc: '#e0b1cb'\n    },\n    {\n        blockid: 'd',\n        blockname: '14',\n        imagesrc: '#d0a7b7'\n    },\n    {\n        blockid: 'e',\n        blockname: '15',\n        imagesrc: '#f3d1d3'\n    },\n    {\n        blockid: 'f',\n        blockname: '16',\n        imagesrc: '#e9b8c8'\n    }\n];\n\n  \n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n\n    multipliedby(number) {\n        return new Vector2D(this.x*number,this.y*number);\n    }\n    transformedby(x,y) {\n        return new Vector2D(this.x+x,this.y+y);\n    }\n}\n\n\nclass Map {\n    constructor(w, h) {\n\n        this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.matrix = null;\n\n        this.data = null;\n\n        this.lastchunkrequesttime = null;\n\n        this.numchunks = null;\n        \n\n    }\n\n    getValues(offset, scale) {\n        let chunkpixels = CHUNKSIZE*scale;\n\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        numchunks.x = Math.ceil(this.canvasdimensions.x/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(this.canvasdimensions.y/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    setMatrix(dimn, start, lines) {\n\n        let coords = [];\n\n        let grid = Array(dimn.x);\n        for (let i=0;i<dimn.x;i++) {\n            grid[i] = Array(dimn.y);\n            for (let j=0;j<dimn.y;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n\n        let map_grid = this;\n        // console.log(coords);\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            }).then((data)=>{\n                return data.arrayBuffer();\n            }).then((chunkbuffer) => {\n                map_grid.data = chunkbuffer;\n                map_grid.numchunks = dimn;\n\n                // let bufferread = new Uint32Array(chunkbuffer);\n\n                // // console.log(bufferread);\n\n                // // let chunkbufferlength = dimn.x*dimn.y;\n\n                // let bufferoffset = 0;\n\n                // for (let i=0;i<dimn.x;i++) {\n                //     for (let j=0;j<dimn.y;j++) {\n                        \n                //         grid[i][j] = new Chunk(i+start.x, j+start.y, bufferread.slice(bufferoffset,bufferoffset+(CHUNKSIZE*CHUNKSIZE)-1)); // trying to get buffer from chunkdata - buffer not implemented yet\n                //         bufferoffset+=(CHUNKSIZE*CHUNKSIZE);\n                //     }\n                // }\n                // map_grid.matrix = grid;\n                // console.log(map_grid.matrix);\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, startpoint) {\n        const cell_i = Math.floor((currentcell.x/CHUNKSIZE))-startpoint.x;\n        const cell_k = currentcell.x - (cell_i+startpoint.x)*CHUNKSIZE;\n\n        const cell_j = Math.floor((currentcell.y/CHUNKSIZE))-startpoint.y;\n        const cell_l = currentcell.y - (cell_j+startpoint.y)*CHUNKSIZE;\n\n\n        return {cell_i, cell_j, cell_k, cell_l};\n    }\n}\n\nclass Chunk {\n    constructor (x, y, chunkcells=[]) {\n        this.x = x;\n        this.y = y;\n        \n        this.data = new ArrayBuffer(4*(CHUNKSIZE*CHUNKSIZE));\n\n        if (chunkcells.length) {\n            let data = new Uint32Array(this.data);\n            for (let i=0;i<chunkcells.length;i++) {\n                data[i] = chunkcells[i];\n            }\n        }\n        \n    }\n    // id needs to be 32 bit (4 byte) uint\n    addCell(x,y,id) {\n        let data = new Uint32Array(this.data);\n        data[(x*CHUNKSIZE+y)] = id;\n    }\n    \n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            debug_mode: false,\n            show_stats: true,\n            block_selected: 'ff0fff', \n            update: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            draw: {\n                time: 0,\n                tot_time: 0,\n                num_updates: 1\n            },\n            cursorx: 0,\n            cursory: 0,\n            offsetx: 0,\n            offsety: 0,\n            chunkx: 0,\n            chunky: 0\n        };\n\n        this.changeBlock = (blockid) => {this.setState({block_selected: blockid})};\n        this.getBlockSelected = () => {\n            //eg. ff00ff\n            // return parseInt(this.state.block_selected, 16);\n            return this.state.block_selected;\n        };\n        this.getDebugMode = () => {return this.state.debug_mode};\n\n        this.isSelected = (blockid) => {return (blockid===this.state.block_selected)};\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({update:{\n                time: new_time, \n                tot_time: this.state.update.tot_time+new_time, \n                num_updates: this.state.update.num_updates+1\n            }});\n        }\n        this.changeDrawTime = (new_time) => {\n            this.setState({draw:{\n                time: new_time, \n                tot_time: this.state.draw.tot_time+new_time, \n                num_updates: this.state.draw.num_updates+1\n            }});\n        }\n        this.changeCursorLoc = (vector) => {\n            this.setState({cursorx: vector.x,cursory: vector.y});\n        }\n        this.changeOffsetLoc = (vector) => {\n            this.setState({offsetx: vector.x,offsety: vector.y});\n        }\n        this.changeChunkLoc = (x,y) => {\n            this.setState({chunkx: x,chunky: y});\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n        // this.getData();\n    }\n\n    getData() {\n\n        const buffer = new ArrayBuffer(4*256);\n        const int32View = new Int32Array(buffer);\n\n        for (let i = 0; i < int32View.length; i++) {\n            int32View[i] = i * 2;\n          };\n        fetch('/test',{\n            method: 'POST',\n            headers: {'Accept': 'application/octet-stream', 'Content-Type': 'application/octet-stream'},\n            body: buffer\n        })\n        .then((res) => res.json())\n        .then((message) => {});\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas getDebugMode={this.getDebugMode} changeUpdateTime={this.changeUpdateTime} changeDrawTime={this.changeDrawTime} getBlockSelected={this.getBlockSelected} changeCursorLoc={this.changeCursorLoc} changeOffsetLoc={this.changeOffsetLoc} changeChunkLoc={this.changeChunkLoc}/>\n                <Palette isSelected={this.isSelected} changeBlock={this.changeBlock}/>\n                <div className='drawer primary'>\n                {(this.state.show_stats)?(<div style={{position: `absolute`,right:`0.8vw`}}>\n                    ({this.state.update.time}ms, avg: {Math.round(this.state.update.tot_time/this.state.update.num_updates)}ms, {this.state.update.num_updates} updates)\n                    <br/>({this.state.draw.time}ms, avg: {Math.round(this.state.draw.tot_time/this.state.draw.num_updates)}ms, {this.state.draw.num_updates} draws)\n                    <br/>Cursor: ({this.state.cursorx},{this.state.cursory})\n                    <br/>Offset: ({this.state.offsetx},{this.state.offsety})\n                    <br/>Chunk: ({this.state.chunkx},{this.state.chunky})\n                </div>):null}\n                <b>Instructions:</b><br/>This is a pixel art canvas with infinite area. Scroll to zoom in and out, right click to pan around, and use left click to draw on the canvas.\n                <br/>Use the palette on the right to select your colour.\n                <div style={{color: `#909090`}}>(!!!!) Be aware that there is no saving yet lol, also this is just a prototype so limited colours, no drawing tools etc.</div>\n                <input type={\"checkbox\"} onChange={()=>{this.setState({debug_mode:!this.state.debug_mode})}}></input> Debug Mode&ensp;\n                <input checked={this.state.show_stats} type={\"checkbox\"} onChange={()=>{this.setState({show_stats:!this.state.show_stats})}}></input> Stats\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getDebugMode = props.getDebugMode;\n        this.getBlockSelected = props.getBlockSelected;\n        this.changeUpdateTime = props.changeUpdateTime;\n        this.changeDrawTime = props.changeDrawTime;\n\n        this.changeCursorLoc = props.changeCursorLoc;\n        this.changeOffsetLoc = props.changeOffsetLoc;\n        this.changeChunkLoc = props.changeChunkLoc;\n\n        this.drawLines = [];\n\n        this.scale = 16;\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n\n        this.canvas = null;\n    }\n\n    //Called after element's initialisation\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n\n        // this.resizeCanvas(this.canvas);\n        const { width, height } = this.canvas.getBoundingClientRect();\n        this.map_grid = new Map(width, height);\n\n        setTimeout(this.updateCanvas(), 1000);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x,y);\n        // console.log(`cursor at (${x.toFixed(1)},${y.toFixed(1)})`);\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x*this.scale)/(this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y*this.scale)/(this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x)/this.scale;\n        let y = (end.y-start.y)/this.scale;\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.floor(this.mapoffset.x),Math.floor(this.mapoffset.y));\n        this.changeOffsetLoc(this.celloffset);\n    }\n\n    drawMap (canvas, startpoint) {\n        let start =  Date.now();\n\n        this.resizeCanvas(canvas);\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // finding location in terms of iterators of current cell\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, startpoint);\n\n        let blockid;\n        let x;\n        let y;\n\n        let doFill = (i,j,k,l) => {\n\n            x = (((i+startpoint.x)*CHUNKSIZE+k)+this.mapoffset.x)*(this.scale);\n            y = (((j+startpoint.y)*CHUNKSIZE+l)+this.mapoffset.y)*(this.scale);\n\n            ctx.fillRect(x, y, this.scale, this.scale);\n            // console.log(x,y,cellapparentsize);\n        }\n        if (this.map_grid.data === null) return;\n        // for map\n\n\n        let chunkbufferoffset = 0;\n        let data = new Uint32Array(this.map_grid.data);\n\n        if (this.getDebugMode()) ctx.beginPath();\n        for (let i=0;i<this.map_grid.numchunks.x;i++) {\n            for (let j=0;j<this.map_grid.numchunks.y;j++) {\n                // for each chunk\n                if (this.getDebugMode()) {\n                    x = (((i+startpoint.x)*CHUNKSIZE)+this.mapoffset.x)*(this.scale);\n                    y = (((j+startpoint.y)*CHUNKSIZE)+this.mapoffset.y)*(this.scale);\n\n                    ctx.fillStyle = \"#000000\";\n                    ctx.lineWidth = 0.01*Math.floor(this.scale);\n                    ctx.moveTo(x, 0);\n                    ctx.lineTo(x, this.canvas.height/2);\n                    // ctx.stroke();\n                    ctx.moveTo(0, y);\n                    ctx.lineTo(this.canvas.width/2, y);\n                }\n                for (let c=0;c<(CHUNKSIZE*CHUNKSIZE);c++) {\n                    let k = Math.floor(c/CHUNKSIZE);\n                    let l = c-(k*CHUNKSIZE);\n\n                    // if (typeof this.map_grid.matrix[i][j] === 'undefined') continue;\n\n                    blockid = data[chunkbufferoffset+c];\n                    // if (c%100===0) console.log(blockid);\n\n                    if (blockid!==0){\n                        // ctx.fillStyle = blockid.toString(16);\n                        ctx.fillStyle = \"#\" + (blockid & 0x00FFFFFF).toString(16).padStart(6, '0');\n                        doFill(i,j,k,l,blockid);\n                    }\n                }\n                chunkbufferoffset += (CHUNKSIZE*CHUNKSIZE);\n            }\n        }\n        if (this.getDebugMode()) ctx.stroke();\n        ctx.fillStyle = \"#\" + this.getBlockSelected() + \"8f\"; // placeholder until get images\n        doFill(cell_i,cell_j,cell_k,cell_l);\n\n        this.changeDrawTime(Date.now()-start);\n    }\n\n    updateCanvas() {\n        let start = Date.now(); // time testing\n\n        let {startpoint, numchunks} = this.map_grid.getValues(this.mapoffset.multipliedby(this.scale), this.scale);\n        let linestosend = this.drawLines;\n        this.drawLines = [];\n        this.map_grid.setMatrix(numchunks, startpoint, linestosend)\n        .then(()=>{\n            this.drawMap(this.canvas, startpoint);\n            this.startpoint = startpoint;\n            this.changeUpdateTime(Date.now()-start);\n        });\n\n        setTimeout(()=>{this.updateCanvas()}, 1000);\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = width*ratio;\n          canvas.height = height*ratio;\n          context.scale(ratio, ratio);\n          return true;\n        }\n    \n        return false\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(currentpos, this.startpoint);\n        // console.log(`Insertion coords: x:${cell_i} y:${cell_j}`);\n        if (this.map_grid.matrix[cell_i][cell_j] !== undefined) this.map_grid.matrix[cell_i][cell_j].addCell(cell_k, cell_l, parseInt(this.getBlockSelected(),16));\n        // console.log(`cell drawn at chunk ${cell_i},${cell_j}`);\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) {\n\n                // plotLine(this.currentcell, newcurrentcell, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n                this.drawLine(this.currentcell,newcurrentcell);\n            }\n            this.currentcell = newcurrentcell;\n            update = true;\n            this.changeCursorLoc(this.currentcell);\n            let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, this.startpoint);\n            this.changeChunkLoc(cell_i+this.startpoint.x,cell_j+this.startpoint.y);\n\n        }\n        \n        return update;\n    }\n\n    drawLine(p1,p2) {\n\n        plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n\n        this.drawLines.push({p1:p1,p2:p2,offset:this.celloffset,blockid:parseInt(this.getBlockSelected(),16)});\n    }\n\n    render() {\n        return (\n            <div>\n            <canvas \n                ref={this.canvasRef} \n                className='map-canvas primary'\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        this.lmousedown=true;\n                        this.drawLine(this.currentcell,this.currentcell);\n                        this.drawMap(this.canvas, this.startpoint);\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseMove={(e) => {\n                    let update = false;\n\n                    update = this.moveCursor(e);\n\n                    if (update) this.drawMap(this.canvas, this.startpoint);\n                }}\n                onMouseLeave={(e) => {\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n                onWheel={(e) => {\n                    e.preventDefault();\n                    let newscale = this.scale - Math.round(e.deltaY)/1000;\n                    if (newscale>0.5) this.scale = newscale;\n                    else this.scale = 0.5;\n                    \n                    this.drawMap(this.canvas, this.startpoint);\n                }}\n            ></canvas>\n            </div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.changeBlock = props.changeBlock;\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    blocks.map(button => (\n                        <div \n                            key={button.blockid} \n                            style={{backgroundColor: `${button.imagesrc}`}} \n                            className={`blockbutton` + (this.props.isSelected(button.blockid) ? \"selected\" : \"\")}\n                            onClick={() => {this.changeBlock(button.blockid)}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <AppWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}