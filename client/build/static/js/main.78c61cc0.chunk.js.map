{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["blocks","blockid","blockname","imagesrc","plotLineLow","x0","y0","x1","y1","drawFunc","dx","dy","yi","D","y","x","plotLineHigh","xi","Vector2D","_classCallCheck","this","_createClass","key","value","othervector","Map","w","h","chunksize","canvasdimensions","matrix","lastchunkrequesttime","offset","chunkpixels","numchunks","startpoint","Math","floor","ceil","dimn","start","lines","coords","grid","Array","i","j","coordsobj","push","map_grid","Promise","resolve","reject","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","chunkstore","currentchunk","concat","undefined","Chunk","chunkdata","split","currentcell","cell_i","cell_k","cell_j","cell_l","chunkcells","arguments","length","modified_cells","fill","id","modified","AppWrapper","_React$Component","props","_this","_possibleConstructorReturn","_getPrototypeOf","call","state","block_selected","update_time","tot_update_time","num_updates","express_data","changeBlock","setState","getBlockSelected","isSelected","changeUpdateTime","new_time","_inherits","document","style","overflow","getData","_this2","message","React","createElement","className","MapCanvas","Palette","position","right","round","color","Component","_React$Component2","_this3","lastChunkFetchTime","lastDrawSendTime","drawLines","cellsize","scale","canvasRef","createRef","mapoffset","celloffset","cursorcurrent","lmousedown","rmousedown","canvas","_this4","current","_this$canvas$getBound","getBoundingClientRect","width","height","chunkinterval","setInterval","updateCanvas","event","rect","clientX","left","clientY","top","end","transform","setTo","_this5","resizeCanvas","ctx","getContext","clearRect","fillStyle","fillRect","cellapparentsize","_this$map_grid$getChu","getChunkPosOffset","doFill","k","l","c","_this6","force","Date","now","_this$map_grid$getVal","getValues","linestosend","setMatrix","drawMap","_canvas$getBoundingCl","_window$devicePixelRa","window","devicePixelRatio","ratio","context","currentpos","_this$map_grid$getChu2","addCell","update","newcursorcurrent","getCursorPosition","moveMap","newcurrentcell","getCurrentCell","isEqualTo","drawLine","p1","p2","_this7","abs","plotLine","drawCellAtMouse","_this8","ref","onContextMenu","e","preventDefault","onMouseDown","button","onMouseUp","onMouseMove","moveCursor","onMouseLeave","onWheel","newscale","deltaY","_React$Component3","_this9","_this10","map","backgroundColor","onClick","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.78c61cc0.chunk.js","sourcesContent":["import './App.css';\nimport React, { createRef } from 'react';\n\n\nconst blocks = [\n    {\n        blockid: 0,\n        blockname: '1',\n        imagesrc: '#ffffff'\n    },\n    {\n        blockid: 1,\n        blockname: '2',\n        imagesrc: '#d1e7dc'\n    },\n    {\n        blockid: 2,\n        blockname: '3',\n        imagesrc: '#c4d4e1'\n    },\n    {\n        blockid: 3,\n        blockname: '4',\n        imagesrc: '#bcb5d3'\n    },\n    {\n        blockid: 4,\n        blockname: '5',\n        imagesrc: '#f5dbe2'\n    },\n    {\n        blockid: 5,\n        blockname: '6',\n        imagesrc: '#eeb6c9'\n    },\n    {\n        blockid: 6,\n        blockname: '7',\n        imagesrc: '#c49abf'\n    },\n    {\n        blockid: 7,\n        blockname: '8',\n        imagesrc: '#bada55'\n    },\n    {\n        blockid: 8,\n        blockname: '9',\n        imagesrc: '#ffd700'\n    },\n    {\n        blockid: 9,\n        blockname: '10',\n        imagesrc: '#f47b79'\n    }\n];\n\nfunction plotLineLow(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    let D = (2 * dy) - dx;\n    let y = y0;\n\n    for (let x = x0;x<x1+1;x++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            y = y + yi;\n            D = D + (2 * (dy - dx));\n        } else {\n            D = D + 2*dy;\n        }\n    }\n}\nfunction plotLineHigh(x0, y0, x1, y1, drawFunc) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    let xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    let D = (2 * dx) - dy;\n    let x = x0;\n\n    for (let y = y0;y<y1+1;y++) {\n        drawFunc(x, y);\n        if (D > 0) {\n            x = x + xi;\n            D = D + (2 * (dx - dy));\n        } else {\n            D = D + 2*dx;\n        }\n    }\n}\n\nfunction plotLine(p1, p2, offset, drawFunc) {\n    \n    let x0 = p1.x+offset.x;\n    let y0 = p1.y+offset.y;\n    \n    let x1 = p2.x+offset.x;\n    let y1 = p2.y+offset.y;\n\n    if (x0===x1 && y0===y1) drawFunc(x0,y0);\n\n\n    if (Math.abs(y1 - y0) < Math.abs(x1 - x0)) {\n        if (x0 > x1) plotLineLow(x1, y1, x0, y0, drawFunc);\n        else plotLineLow(x0, y0, x1, y1, drawFunc);\n    }\n    else {\n        if (y0 > y1) plotLineHigh(x1, y1, x0, y0, drawFunc);\n        else plotLineHigh(x0, y0, x1, y1, drawFunc);\n    }\n}\n\n\nclass Vector2D {\n    constructor(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    transform(x,y) {\n        this.x += x;\n        this.y += y;\n    }\n\n    setTo(x,y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isEqualTo(othervector) {\n        return (this.x===othervector.x && this.y===othervector.y);\n    }\n    notEqualTo(othervector) {\n        return (this.x!==othervector.x || this.y!==othervector.y);\n    }\n\n    positive() {\n        return (this.x >= 0 && this.y >=0);\n    }\n}\n\n\nclass Map {\n    constructor(w, h, chunksize) {\n\n        this.canvasdimensions = new Vector2D(w,h); // establishing at start means no resizing canvas element\n        this.chunksize = chunksize;\n        this.matrix = null;\n\n        this.lastchunkrequesttime = null;\n        \n\n    }\n\n    getValues(offset, chunkpixels) {\n        let numchunks = new Vector2D(0,0);\n        let startpoint = new Vector2D(0,0);\n\n        startpoint.x = (offset.x === 0) ? 0 : Math.floor((-1*offset.x)/chunkpixels);\n        startpoint.y = (offset.y === 0) ? 0 : Math.floor((-1*offset.y)/chunkpixels);\n\n        numchunks.x = Math.ceil(this.canvasdimensions.x/chunkpixels)+1; // bit cheaty - should probs optimise\n        numchunks.y = Math.ceil(this.canvasdimensions.y/chunkpixels)+1;\n\n        return {startpoint, numchunks};\n    }\n\n    setMatrix(dimn, start, lines) {\n\n        let coords = [];\n\n        let grid = Array(dimn.x);\n        for (let i=0;i<dimn.x;i++) {\n            grid[i] = Array(dimn.y);\n            for (let j=0;j<dimn.x;j++) {\n                let coordsobj = { x: start.x+i, y: start.y+j };\n                coords.push(coordsobj);    \n            }\n        }\n\n        let map_grid = this;\n        // console.log(coords);\n        return new Promise(function(resolve, reject) {\n            fetch('/getchunks',{\n                method: 'POST',\n                headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n                body: JSON.stringify({coords:coords, lines:lines})\n            })\n            .then((res) => res.json())\n            .then((chunkstore) => {\n                // console.log(chunkstore);\n\n                for (let i=0;i<dimn.x;i++) {\n                    for (let j=0;j<dimn.y;j++) {\n                        let currentchunk = chunkstore[`${i+start.x},${j+start.y}`];\n                        if (currentchunk !== undefined) {\n                            grid[i][j] = new Chunk(map_grid.chunksize, i+start.x, j+start.y, currentchunk.chunkdata.split(''));\n                        }\n                        else grid[i][j] = new Chunk(map_grid.chunksize, i+start.x, j+start.y);\n                    }\n                }\n                map_grid.matrix = grid;\n                resolve();\n            });\n        });\n    }\n\n    getChunkPosOffset(currentcell, chunksize, startpoint) {\n        const cell_i = Math.floor((currentcell.x/chunksize))-startpoint.x;\n        const cell_k = currentcell.x - (cell_i+startpoint.x)*chunksize;\n\n        const cell_j = Math.floor((currentcell.y/chunksize))-startpoint.y;\n        const cell_l = currentcell.y - (cell_j+startpoint.y)*chunksize;\n\n\n        return {cell_i, cell_j, cell_k, cell_l};\n    }\n}\n\nclass Chunk {\n    constructor (chunksize, x, y, chunkcells=[]) {\n        this.x = x;\n        this.y = y;\n        \n        // this.modified_cells = [];\n        if (chunkcells.length) {\n            this.modified_cells = chunkcells;\n        } else {\n            this.modified_cells = Array(chunksize*chunksize).fill('0');\n        }\n        \n    }\n\n    addCell(x,y, id) {\n        this.modified_cells[x*16+y] = id;\n        this.modified = true;\n    }\n    \n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            block_selected: 1, \n            update_time: 0,\n            tot_update_time: 0,\n            num_updates: 1,\n            express_data: null\n        };\n\n        this.changeBlock = (blockid) => {this.setState({block_selected: blockid})};\n        this.getBlockSelected = () => {return this.state.block_selected};\n\n        this.isSelected = (blockid) => {return (blockid===this.state.block_selected)};\n\n        this.changeUpdateTime = (new_time) => {\n            this.setState({\n                update_time: new_time, \n                tot_update_time: this.state.tot_update_time+new_time, \n                num_updates: this.state.num_updates+1\n            });\n        }\n    }\n\n    componentDidMount() {\n        document.body.style.overflow = \"hidden\"; // stops user from scrolling the page\n        this.getData();\n    }\n\n    getData() {\n        fetch(\"/api\")\n        .then((res) => res.json())\n        .then((express_data) => this.setState({express_data: express_data.message}));\n    }\n\n    render() {\n        return (\n            <div className='App-wrapper'>\n                <MapCanvas changeUpdateTime={this.changeUpdateTime} getBlockSelected={this.getBlockSelected}/>\n                <Palette isSelected={this.isSelected} changeBlock={this.changeBlock}/>\n                <div className='drawer primary'>\n                <div style={{position: `absolute`,right:`0.8vw`}}>\n                    ({this.state.update_time}ms, avg: {Math.round(this.state.tot_update_time/this.state.num_updates)}ms, {this.state.num_updates} updates)\n                    <br/>{`Here is the express message: ${this.state.express_data}`}\n                </div>\n                <b>Instructions:</b><br/>This is a pixel art canvas with infinite area. Scroll to zoom in and out, right click to pan around, and use left click to draw on the canvas.\n                <br/>Use the palette on the right to select your colour.\n                <div style={{color: `#909090`}}>(!!!!) Be aware that there is no saving yet lol, also this is just a prototype so limited colours, no drawing tools etc.</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MapCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.getBlockSelected = props.getBlockSelected;\n\n        this.changeUpdateTime = props.changeUpdateTime;\n\n        this.lastChunkFetchTime = 0;\n        this.lastDrawSendTime = 0;\n\n        this.drawLines = [];\n\n        this.cellsize = 8;\n        this.scale = 2;\n        this.chunksize = 16;\n\n        this.map_grid = null;\n        this.canvasRef = createRef();\n    \n        this.mapoffset = new Vector2D(0,0);\n        this.celloffset = new Vector2D(0,0);\n        this.currentcell = new Vector2D(0,0);\n        this.startpoint = new Vector2D(0,0);\n        this.numchunks = new Vector2D(0,0);\n\n        this.cursorcurrent = new Vector2D(0,0);\n        this.lmousedown = false;\n        this.rmousedown = false;\n\n        this.canvas = null;\n    }\n\n    //Called after element's initialisation\n    // componentDidUpdate() { this.updateCanvas() }\n    componentDidMount() { \n        this.canvas = this.canvasRef.current;\n\n        // this.resizeCanvas(this.canvas);\n        const { width, height } = this.canvas.getBoundingClientRect();\n        this.map_grid = new Map(width, height, this.chunksize);\n\n        this.chunkinterval = setInterval(() => this.updateCanvas(true), 1000);\n        // setTimeout(()=>{this.drawinterval = setInterval(() => this.sendDraws(), 1000)}, 500);\n\n        // this.updateCanvas(true);\n    }\n\n    getCursorPosition(event, canvas) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const pos = new Vector2D(x,y);\n        // console.log(`cursor at (${x.toFixed(1)},${y.toFixed(1)})`);\n        return pos;\n    }\n\n    getCurrentCell() {\n        let x = Math.floor((this.cursorcurrent.x-this.mapoffset.x)/(this.cellsize*this.scale));\n        let y = Math.floor((this.cursorcurrent.y-this.mapoffset.y)/(this.cellsize*this.scale));\n        const pos = new Vector2D(x,y);\n        return pos;\n    }\n\n    moveMap(start, end) {\n        let x = (end.x-start.x);\n        let y = (end.y-start.y);\n        this.mapoffset.transform(x,y);\n        this.celloffset.setTo(Math.round(this.mapoffset.x),Math.round(this.mapoffset.y));\n    }\n\n    // maybe should be in the map class\n    drawMap (canvas, startpoint) {\n\n        this.resizeCanvas(canvas);\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        // ctx.fillStyle = \"#fff7d8\";\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        let cellapparentsize = this.cellsize*this.scale;\n\n        // finding location in terms of iterators of current cell\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(this.currentcell, this.chunksize, startpoint);\n\n        let blockid;\n        let x;\n        let y;\n\n        let doFill = (i,j,k,l) => {\n\n            x = ((i+startpoint.x)*this.chunksize+k)*(cellapparentsize)+this.mapoffset.x;\n            y = ((j+startpoint.y)*this.chunksize+l)*(cellapparentsize)+this.mapoffset.y;\n\n            ctx.fillRect(x, y, cellapparentsize, cellapparentsize);\n        }\n        if (this.map_grid.matrix === null) return;\n        // for map\n        for (let i=0;i<this.map_grid.matrix.length;i++) {\n            for (let j=0;j<this.map_grid.matrix[i].length;j++) {\n                // for each chunk\n                for (let c=0;c<(this.chunksize*this.chunksize);c++) {\n                    let k = Math.floor(c/this.chunksize);\n                    let l = c-(k*this.chunksize);\n\n                    if (typeof this.map_grid.matrix[i][j] === 'undefined') continue;\n                    blockid = this.map_grid.matrix[i][j].modified_cells[c];\n\n                    if (blockid!==\"0\"){\n                        ctx.fillStyle = blocks[blockid].imagesrc; // placeholder until get images\n                        doFill(i,j,k,l,blockid);\n                    }\n                }\n            }\n        }\n        ctx.fillStyle = blocks[this.getBlockSelected()].imagesrc+\"8f\"; // placeholder until get images\n        doFill(cell_i,cell_j,cell_k,cell_l);\n    }\n\n\n    // sendDraws() {\n    //     let start = Date.now(); // time testing\n\n\n    //     if (this.drawLines.length > 0) {\n    //         let linestosend = this.drawLines;\n    //         this.drawLines = [];\n    //         fetch('/senddraws',{\n    //             method: 'POST',\n    //             headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n    //             body: JSON.stringify(linestosend)\n    //         })\n    //         .then((result) => {\n    //             console.log(`Draw query ${result.ok}, RTT: ${Date.now()-start}ms`);\n    //         });\n    //     }\n\n    // }\n\n    updateCanvas(force=false) {\n        let start = Date.now(); // time testing\n\n        if (Date.now() >= this.lastChunkFetchTime+1000) {\n            // console.log(Date.now());\n            this.lastChunkFetchTime = Date.now();\n            let {startpoint, numchunks} = this.map_grid.getValues(this.mapoffset, this.chunksize*this.cellsize*this.scale);\n            // console.log(startpoint, this.startpoint);\n            if (force) {\n                // console.log(\"querying for new chunks...\");\n                let linestosend = this.drawLines;\n                this.drawLines = [];\n                this.map_grid.setMatrix(numchunks, startpoint, linestosend)\n                .then(()=>{\n                    if (this.map_grid.matrix !== null) this.drawMap(this.canvas, startpoint);\n                    this.startpoint = startpoint;\n                    this.numchunks = numchunks;\n\n                    // console.log(this.map_grid.matrix);\n                    this.changeUpdateTime(Date.now()-start);\n                });\n            } else {\n                this.drawMap(this.canvas, startpoint);\n            }\n        } else {\n            this.drawMap(this.canvas, this.startpoint);\n        }\n        \n        // requestAnimationFrame(() => {this.drawMap(this.canvas, startpoint);});\n    }\n\n    // stolen code lmao\n    resizeCanvas(canvas) {\n        const { width, height } = canvas.getBoundingClientRect();\n        \n        if (canvas.width !== width || canvas.height !== height) {\n          const { devicePixelRatio:ratio=1 } = window;\n          const context = canvas.getContext('2d');\n          canvas.width = width*ratio;\n          canvas.height = height*ratio;\n          context.scale(ratio, ratio);\n          return true;\n        }\n    \n        return false\n    }\n\n    drawCellAtMouse(x,y) {\n        const currentpos = new Vector2D(x-this.celloffset.x,y-this.celloffset.y);\n\n        let {cell_i, cell_j, cell_k, cell_l} = this.map_grid.getChunkPosOffset(currentpos, this.chunksize, this.startpoint);\n        // console.log(`Insertion coords: x:${cell_i} y:${cell_j}`);\n        this.map_grid.matrix[cell_i][cell_j].addCell(cell_k, cell_l, this.getBlockSelected());\n        // console.log(`cell drawn at chunk ${cell_i},${cell_j}`);\n    }\n\n    moveCursor(event) {\n        let update = false;\n        let newcursorcurrent = this.getCursorPosition(event, this.canvas);\n        if (this.rmousedown) {\n            this.moveMap(this.cursorcurrent, newcursorcurrent);\n            update = true;\n        }\n        this.cursorcurrent = newcursorcurrent;\n        let newcurrentcell = this.getCurrentCell();\n        if (!this.currentcell.isEqualTo(newcurrentcell)) {\n            if (this.lmousedown) {\n\n                // plotLine(this.currentcell, newcurrentcell, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n                this.drawLine(this.currentcell,newcurrentcell);\n            }\n            this.currentcell = newcurrentcell;\n            update = true;\n        }\n        \n        return update;\n    }\n\n    drawLine(p1,p2) {\n\n        plotLine(p1, p2, this.celloffset, (x,y)=>this.drawCellAtMouse(x,y));\n\n        this.drawLines.push({p1:p1,p2:p2,offset:this.celloffset,blockid:this.getBlockSelected()});\n    }\n\n    render() {\n        return (\n            <div>\n            <canvas \n                ref={this.canvasRef} \n                className='map-canvas primary'\n                onContextMenu={(e) => {\n                    e.preventDefault();\n                    // this.rmousedown=true;\n                }}\n                onMouseDown={(e) => {\n                    e.preventDefault();\n                    if (e.button === 0) {\n                        this.lmousedown=true;\n                        this.drawLine(this.currentcell,this.currentcell);\n                        this.updateCanvas();\n                    }\n                    else if (e.button === 2) {\n                        this.rmousedown=true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.updateCanvas();\n                }}\n                onMouseMove={(e) => {\n                    let update = false;\n\n                    update = this.moveCursor(e);\n\n                    if (update) this.updateCanvas();\n                }}\n                onMouseLeave={(e) => {\n                    // console.log(\"left canvas\");\n                    this.moveCursor(e);\n                    this.lmousedown=false;\n                    this.rmousedown=false;\n                    this.currentcell.setTo(-1,-1);\n                    this.updateCanvas();\n                }}\n                onWheel={(e) => {\n                    e.preventDefault();\n                    let newscale = this.scale - Math.round(e.deltaY)/100;\n                    if (newscale>0.5) this.scale = newscale;\n                    else this.scale = 0.5;\n                    // console.log(this.scale);\n                    // console.log(e.deltaY);\n                    this.updateCanvas();\n                    // if (this.scale < 1) console.table(this.map_grid.matrix);\n                }}\n            ></canvas>\n            </div>\n        )\n    }\n}\n\n// needs to be fixed up - maybe add useEffect()\nclass Palette extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.changeBlock = props.changeBlock;\n    }\n\n    render() {\n        return (\n            <div className='palette primary'>\n                {\n                    blocks.map(button => (\n                        <div \n                            key={button.blockid} \n                            style={{backgroundColor: `${button.imagesrc}`}} \n                            className={`blockbutton` + (this.props.isSelected(button.blockid) ? \"selected\" : \"\")}\n                            onClick={() => {this.changeBlock(button.blockid)}}\n                            //onClick={() => {console.log(button.blockid)}}\n                            ></div>\n                    ))\n                }\n        </div>\n        )\n    }\n\n}\n\n\n\n\nfunction App() {\n  return (\n    <div className='App'>\n        <AppWrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}